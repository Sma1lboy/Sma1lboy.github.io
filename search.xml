<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/2023/01/13/2023.01.13%20PHILOS%201332/"/>
      <url>/2023/01/13/2023.01.13%20PHILOS%201332/</url>
      
        <content type="html"><![CDATA[<p>Deductive Arguments</p><ul><li>Premises<ul><li>Steps (Modus ponens)<ul><li>p1: A</li><li>p2: <strong>if A then B</strong></li><li>C: B</li></ul></li><li>2 Questions<ul><li>Are the premises true</li><li>Do the guarantee the conclusion<ul><li>if they take above construction, then its true</li></ul></li></ul></li></ul></li><li>Conclusion</li><li>Valid in Philo<ul><li>The premises guarentee the conclusion</li></ul></li><li>Sound in Philo<ul><li>Valid + premises are true</li></ul></li><li>fallacy fallacy<ul><li>because a claim has been poorly argued</li></ul></li><li>Epistemic<ul><li>relating to knowledge</li></ul></li><li>Pragmatic&#x2F;Practical<ul><li>Non-Moral</li></ul></li><li>Empirical <ul><li>Relating to physical world</li></ul></li><li>Thought Experiment <ul><li>check ideas for coherence</li><li>Test principles</li></ul></li></ul>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>GO tour</title>
      <link href="/2022/12/21/GO/"/>
      <url>/2022/12/21/GO/</url>
      
        <content type="html"><![CDATA[<h1 id="Basic"><a href="#Basic" class="headerlink" title="Basic"></a>Basic</h1><h2 id="Imports"><a href="#Imports" class="headerlink" title="Imports"></a>Imports</h2><h3 id="Group-imports"><a href="#Group-imports" class="headerlink" title="Group imports"></a>Group imports</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">Imports</span><br><span class="line">This code groups the imports into a parenthesized, <span class="string">&quot;factored&quot;</span> <span class="keyword">import</span> statement.</span><br><span class="line"></span><br><span class="line">one way:</span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;math&quot;</span></span><br><span class="line"></span><br><span class="line">or </span><br><span class="line"><span class="keyword">import</span> (</span><br><span class="line"><span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="string">&quot;math&quot;</span></span><br><span class="line">)</span><br></pre></td></tr></table></figure><h2 id="Exported-names"><a href="#Exported-names" class="headerlink" title="Exported names"></a>Exported names</h2><p>In Go, a name is exported if it begins with a capital letter. For example, <code>Pizza</code> is an exported name, as is <code>Pi</code>, which is exported from the <code>math</code> package.</p><p><code>pizza</code> and <code>pi</code> do not start with a capital letter, so they are not exported.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">bad example:</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(math.pi)</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">correct one:</span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(math.Pi)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Functions"><a href="#Functions" class="headerlink" title="Functions"></a>Functions</h2><p>A function can take zero or more arguments as following:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(add(<span class="number">42</span>, <span class="number">13</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>The way  declare function is <code>func FUNCTION_NAME (ARGUMENTS_NAME ARG_TYPE) RETURN_TYPE &#123;&#125;</code></p><h3 id="Functions-continued"><a href="#Functions-continued" class="headerlink" title="Functions continued"></a>Functions continued</h3><p>When <strong>two or more consecutive</strong> named function parameters <strong>share</strong> a type, you can omit the type from all but the last.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">from</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x <span class="type">int</span>, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line"><span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">to</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">add</span><span class="params">(x, y <span class="type">int</span>)</span></span> <span class="type">int</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> x + y</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Multiple-results"><a href="#Multiple-results" class="headerlink" title="Multiple results"></a>Multiple results</h3><p>A function can return any number of results.</p><p>The <code>swap</code> function returns two strings.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">swap</span><span class="params">(x, y <span class="type">string</span>)</span></span> (<span class="type">string</span>, <span class="type">string</span>) &#123;</span><br><span class="line"><span class="keyword">return</span> y, x</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">a, b := swap(<span class="string">&quot;hello&quot;</span>, <span class="string">&quot;world&quot;</span>)</span><br><span class="line">fmt.Println(a, b)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p><code>(string, string)</code> return two string</p><p>with return keyword, two return string separate by comma(,)</p><h3 id="Name-return-values"><a href="#Name-return-values" class="headerlink" title="Name return values"></a>Name return values</h3><p>Go’s return values may be <strong>named</strong>. If so, they are <strong>treated as variables defined at the top of the function</strong>.</p><p>These names should be used to document the meaning of the return values.</p><p>A <code>return</code> statement without arguments returns the named return values. This is known as a “<strong>naked</strong>“ return.</p><p><strong>Naked return</strong> statements should be used only in <strong>short functions</strong>, as with the example shown here. They can <strong>harm readability in longer functions</strong>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">split</span><span class="params">(sum <span class="type">int</span>)</span></span> (x, y <span class="type">int</span>) &#123; <span class="comment">//name the return values</span></span><br><span class="line">x = sum * <span class="number">4</span> / <span class="number">9</span></span><br><span class="line">y = sum - x</span><br><span class="line"><span class="keyword">return</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">fmt.Println(split(<span class="number">17</span>))</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Variables"><a href="#Variables" class="headerlink" title="Variables"></a>Variables</h2><p>The <code>var</code> statement declares a list of variables; as in function argument lists, the type is last.</p><p>A <code>var</code> statement can be at package or function level. We see both in this example.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> c, python, java, python3 <span class="type">bool</span> </span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">fmt.Println(i, c, python, java, python3)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>syntax rule <code>var VARIABLE_NAME TYPE</code></p><h3 id="Variables-with-initializers"><a href="#Variables-with-initializers" class="headerlink" title="Variables with initializers"></a>Variables with initializers</h3><p>Even list of variables could initializers together</p><p>A var declaration can include initializers, one per variable.</p><p>​If an initializer is present, the type can be omitted; the variable will take the type of the initializer.</p><h3 id="Short-variable-declarations"><a href="#Short-variable-declarations" class="headerlink" title="Short variable declarations"></a>Short variable declarations</h3><p>Inside a function, the <code>:=</code> short assignment statement can be used in place of a <code>var</code> declaration with <strong>implicit type</strong>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">  java := <span class="literal">true</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Zero-values"><a href="#Zero-values" class="headerlink" title="Zero values"></a>Zero values</h3><p>Variables declared without an <strong>explicit initial</strong> value are <strong>given their <em>zero value</em>.</strong></p><ul><li><code>0</code> for numeric types,</li><li><code>false</code> for the boolean type, and</li><li><code>&quot;&quot;</code> (the empty string) for strings.</li></ul><h2 id="Type-conversions"><a href="#Type-conversions" class="headerlink" title="Type conversions"></a><strong>Type conversions</strong></h2><p>​Some numeric conversions:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span> = <span class="number">42</span></span><br><span class="line"><span class="keyword">var</span> f <span class="type">float64</span> = <span class="type">float64</span>(i)</span><br><span class="line"><span class="keyword">var</span> u <span class="type">uint</span> = <span class="type">uint</span>(f)</span><br><span class="line"></span><br><span class="line">more simple way </span><br><span class="line"></span><br><span class="line">i := <span class="number">42</span></span><br><span class="line">f := <span class="type">float64</span>(i)</span><br><span class="line">u := <span class="type">uint</span>(f)</span><br></pre></td></tr></table></figure><h2 id="Type-inference"><a href="#Type-inference" class="headerlink" title="Type inference"></a>Type inference</h2><p>When declaring a variable without specifying an explicit type (either by using the <code>:=</code> syntax or <code>var =</code> expression syntax), the variable’s type is <strong>inferred from</strong> the value on the <strong>right hand side.</strong></p><p>When the right hand side of the declaration is typed, the new variable is of that same type:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> i <span class="type">int</span></span><br><span class="line">j := i <span class="comment">// j is an int</span></span><br></pre></td></tr></table></figure><p>But when the right hand side contains an <strong>untyped numeric constant</strong>, the new variable <strong>may be</strong> an <code>int</code>, <code>float64</code>, or <code>complex128</code> depending on the precision of the constant:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span>           <span class="comment">// int</span></span><br><span class="line">f := <span class="number">3.142</span>        <span class="comment">// float64</span></span><br><span class="line">g := <span class="number">0.867</span> + <span class="number">0.5i</span> <span class="comment">// complex128</span></span><br></pre></td></tr></table></figure><h2 id="Constants"><a href="#Constants" class="headerlink" title="Constants"></a>Constants</h2><p>Constants are declared like variables, but with the <code>const</code> keyword.</p><p>Constants can be character, string, boolean, or numeric values.</p><p>Constants cannot be declared using the <code>:=</code> syntax.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">const</span> Pi = <span class="number">3.14</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">const</span> World = <span class="string">&quot;世界&quot;</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Hello&quot;</span>, World)</span><br><span class="line">fmt.Println(<span class="string">&quot;Happy&quot;</span>, Pi, <span class="string">&quot;Day&quot;</span>)</span><br><span class="line"></span><br><span class="line"><span class="keyword">const</span> Truth = <span class="literal">true</span></span><br><span class="line">fmt.Println(<span class="string">&quot;Go rules?&quot;</span>, Truth)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h3 id="Numeric-Constants"><a href="#Numeric-Constants" class="headerlink" title="Numeric Constants"></a>Numeric Constants</h3><p>Numeric constants are <strong>high-precision <em>values</em>.</strong></p><h2 id="For"><a href="#For" class="headerlink" title="For"></a>For</h2><p>Go has <strong>only one looping construct</strong>, the <code>for</code> loop.</p><p>The basic <code>for</code> loop has three components separated by semicolons:</p><ul><li>the init statement: executed before the first iteration</li><li>the <strong>condition expression</strong>: evaluated before every iteration</li><li>the post statement: executed at the <strong>end of every iteration</strong></li></ul><p><strong>Note:</strong> Unlike other languages like C, Java, or JavaScript there are <strong>no parentheses surrounding</strong> the three components of the <code>for</code> statement and the braces <code>&#123; &#125;</code> are always required.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">    sum := <span class="number">0</span></span><br><span class="line">    <span class="keyword">for</span> i := <span class="number">0</span>; i &lt; <span class="number">100</span>; i++ &#123;</span><br><span class="line">        sum += i</span><br><span class="line">    &#125;</span><br><span class="line">    fmt.Println(sum)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Wait-init-and-post-statement-is-optional"><a href="#Wait-init-and-post-statement-is-optional" class="headerlink" title="Wait init and post statement is optional"></a>Wait init and post statement is optional</h3><p>That’s how <strong>while construct</strong> in GO</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> ;sum &lt; <span class="number">1000</span>; &#123;</span><br><span class="line">sum+= <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>And, it could do more… (<em><strong>For is Go’s “while”</strong></em>)</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">sum := <span class="number">0</span></span><br><span class="line"><span class="keyword">for</span> sum &lt; <span class="number">1000</span> &#123;</span><br><span class="line">    sum += <span class="number">100</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>it can <strong>omit</strong> the semicolon !</p><h3 id="Forever-infinity-while-loop"><a href="#Forever-infinity-while-loop" class="headerlink" title="Forever(infinity while loop)"></a>Forever(infinity while loop)</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">for</span> &#123;</span><br><span class="line">    <span class="comment">//content</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="if"><a href="#if" class="headerlink" title="if"></a>if</h2><p>Go’s <code>if</code> statements are like its <code>for</code> loops; <strong>the expression need not be surrounded by parentheses</strong> <code>( )</code> but the braces <code>&#123; &#125;</code> are required.</p><h3 id="if-with-short-statement"><a href="#if-with-short-statement" class="headerlink" title="if with short statement"></a>if with short statement</h3><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span> v := math.Pow(x, n); v &lt; lim &#123;</span><br><span class="line"><span class="keyword">return</span> v</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Defer"><a href="#Defer" class="headerlink" title="Defer"></a>Defer</h2><p>A defer statement defers the execution of a function until the <strong>surrounding function returns.</strong></p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line"><span class="keyword">defer</span> fmt.Println(<span class="string">&quot;world&quot;</span>)</span><br><span class="line"></span><br><span class="line">fmt.Println(<span class="string">&quot;hello&quot;</span>)</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//output</span></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">hello</span></span><br><span class="line"><span class="comment">world</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure><h2 id="Stacking-defers"><a href="#Stacking-defers" class="headerlink" title="Stacking defers"></a>Stacking defers</h2><p>Deferred function calls are pushed onto a <strong>stack</strong>. When a function returns, its deferred calls are executed in <strong>last-in-first-out order</strong>.</p><h2 id="Pointers"><a href="#Pointers" class="headerlink" title="Pointers"></a>Pointers</h2><p>Go has pointers. A pointer holds the memory address of a value.</p><p>The type <code>*T</code> is a pointer to a <code>T</code> value. Its zero value is <code>nil</code>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">var</span> p *<span class="type">int</span></span><br></pre></td></tr></table></figure><p>The <code>&amp;</code> operator generates a pointer to its operand.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">i := <span class="number">42</span></span><br><span class="line">p = &amp;i</span><br></pre></td></tr></table></figure><p>The <code>*</code> operator denotes the pointer’s underlying value.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">fmt.Println(*p) <span class="comment">// read i through the pointer p</span></span><br><span class="line">*p = <span class="number">21</span>         <span class="comment">// set i through the pointer p</span></span><br></pre></td></tr></table></figure><p>This is known as “dereferencing” or “indirecting”.</p><h2 id="Structs"><a href="#Structs" class="headerlink" title="Structs"></a>Structs</h2><p>A <code>struct</code> is a collection of fields.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//parallel with func</span></span><br><span class="line"><span class="keyword">type</span> Student <span class="keyword">struct</span> &#123;</span><br><span class="line">    Name <span class="type">string</span></span><br><span class="line">    Age <span class="type">int</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="Struct-Fields"><a href="#Struct-Fields" class="headerlink" title="Struct Fields"></a>Struct Fields</h2><p>Struct fields are accessed using a <strong>dot</strong>.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span>&#123;</span><br><span class="line">    allen := Student&#123;<span class="string">&quot;allen&quot;</span>, <span class="number">21</span>&#125;</span><br><span class="line">allen.Age = <span class="number">11</span></span><br><span class="line">fmt.Println(allen.Age)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Pointers-to-structs"><a href="#Pointers-to-structs" class="headerlink" title="Pointers to structs"></a>Pointers to structs</h3><p>Struct fields can be accessed through a struct pointer.</p><p>To access the field <code>X</code> of a struct when we have the struct pointer <code>p</code> we could write <code>(*p).X</code>. However, that notation is cumbersome, so the language permits us instead to write just <code>p.X</code>, <strong>without the explicit dereference</strong>.</p><h3 id="Struct-Literals"><a href="#Struct-Literals" class="headerlink" title="Struct Literals"></a>Struct Literals</h3><p>A struct literal denotes a newly allocated struct value by listing the values of its fields.</p><p>You can list just a subset of fields by using the <code>Name:</code> syntax.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">type</span> Vertex <span class="keyword">struct</span> &#123;</span><br><span class="line">X, Y <span class="type">int</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//under miain or var</span></span><br><span class="line">v2 = Vertex&#123;Y: <span class="number">2</span>, X: <span class="number">1</span>&#125; <span class="comment">// order no matter</span></span><br></pre></td></tr></table></figure><h2 id="Array"><a href="#Array" class="headerlink" title="Array"></a>Array</h2><p>An array has a fixed size.</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">arr1 := [SIZE]<span class="type">int</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line"><span class="keyword">var</span> arr2 [<span class="number">2</span>]<span class="type">int</span></span><br><span class="line"><span class="comment">//or</span></span><br><span class="line">arr3 := []<span class="type">int</span>&#123;<span class="number">1</span>, <span class="number">2</span>, <span class="number">3</span>&#125;<span class="comment">//slice</span></span><br></pre></td></tr></table></figure><h3 id="Slices"><a href="#Slices" class="headerlink" title="Slices"></a>Slices</h3><p> is a dynamically-sized, flexible view into the elements of an array</p><p>A slice is formed by specifying two indices, a low and high bound, separated by a colon:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">package</span> main</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> <span class="string">&quot;fmt&quot;</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">func</span> <span class="title">main</span><span class="params">()</span></span> &#123;</span><br><span class="line">primes := [<span class="number">6</span>]<span class="type">int</span>&#123;<span class="number">2</span>, <span class="number">3</span>, <span class="number">5</span>, <span class="number">7</span>, <span class="number">11</span>, <span class="number">13</span>&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">var</span> s []<span class="type">int</span> = primes[<span class="number">1</span>:<span class="number">4</span>]</span><br><span class="line">fmt.Println(s)</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h4 id="Slices-are-like-references-to-arrays"><a href="#Slices-are-like-references-to-arrays" class="headerlink" title="Slices are like references to arrays"></a>Slices are like references to arrays</h4><p>A slice does <strong>not store any data,</strong> it just describes a section of an underlying array.</p><p>Changing the elements of a slice modifies the corresponding elements of its underlying array.</p><p>Other slices that share the same underlying array will see those changes.</p><h3 id="Slices-literals"><a href="#Slices-literals" class="headerlink" title="Slices literals"></a>Slices literals</h3><p>A slice literal is like an array literal without the length.</p><p>This is an array literal:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="number">3</span>]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><p>And this creates the same array as above, then builds a slice that references it:</p><figure class="highlight go"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[]<span class="type">bool</span>&#123;<span class="literal">true</span>, <span class="literal">true</span>, <span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure><h2 id="Nil-slices"><a href="#Nil-slices" class="headerlink" title="Nil slices"></a>Nil slices</h2><p>The zero value of a slice is <code>nil</code>.</p><p>A nil slice has a length and capacity of 0 and has no underlying array.</p><p>not done yet..</p><h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><p>The Standard tour from Go website: <a href="https://go.dev/tour/list">A Tour of GO</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> tour note Go </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Algorithm&amp;Data Structure Review</title>
      <link href="/2022/12/20/Algorithm&amp;Data%20Structure%20Review/"/>
      <url>/2022/12/20/Algorithm&amp;Data%20Structure%20Review/</url>
      
        <content type="html"><![CDATA[<h1 id="Introduction"><a href="#Introduction" class="headerlink" title="Introduction"></a>Introduction</h1><p>The Algorithm Review will <strong>not</strong> follow the <strong>Easy to Hard</strong>, I will start reviewing from the least familiar to the most familiar.</p><h1 id="Divide-and-Conquer-Concept-ref"><a href="#Divide-and-Conquer-Concept-ref" class="headerlink" title="Divide and Conquer Concept(ref)"></a>Divide and Conquer Concept(ref)</h1><p>分治分治，即分而治之。分治，就是把一个复杂的问题分成两个或更多的相同或相似的子问题，再把子问题分成更小的子问题……直到最后子问题可以简单的直接求解，原问题的解即子问题的解的合并。这个技巧是很多高效算法的基础，如排序算法(快速排序，归并排序)，傅立叶变换(快速傅立叶变换)……直接说就是将一个难以直接解决的大问题，分割成一些规模比较小的相同的小问题，以便各个击破，分而治之。</p><h3 id="使用条件"><a href="#使用条件" class="headerlink" title="使用条件"></a>使用条件</h3><ol><li><p>该问题的规模缩小到一定的程度就可以容易地解决</p></li><li><p>该问题可以分解为若干个规模较小的相同问题。</p></li><li><pre><code>利用该问题分解出的子问题的解可以合并为该问题的解；</code></pre></li><li><pre><code>该问题所分解出的各个子问题是相互独立的，即子问题之间不包含公共的子子问题。(非必需）</code></pre></li></ol><h1 id="Greedy"><a href="#Greedy" class="headerlink" title="Greedy"></a>Greedy</h1><h1 id="Bit-Manipulation"><a href="#Bit-Manipulation" class="headerlink" title="Bit Manipulation"></a>Bit Manipulation</h1><h1 id="Dyamic-Programming"><a href="#Dyamic-Programming" class="headerlink" title="Dyamic Programming"></a>Dyamic Programming</h1><h2 id="Kadane’s-Algorithm"><a href="#Kadane’s-Algorithm" class="headerlink" title="Kadane’s Algorithm"></a>Kadane’s Algorithm</h2><h1 id="String"><a href="#String" class="headerlink" title="String"></a>String</h1><h1 id="Interval"><a href="#Interval" class="headerlink" title="Interval"></a>Interval</h1><h1 id="Binary-Search"><a href="#Binary-Search" class="headerlink" title="Binary Search"></a>Binary Search</h1><h1 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h1><h1 id="Sliding-Window"><a href="#Sliding-Window" class="headerlink" title="Sliding Window"></a>Sliding Window</h1><h1 id="Tree"><a href="#Tree" class="headerlink" title="Tree"></a>Tree</h1><h1 id="Linkedlist"><a href="#Linkedlist" class="headerlink" title="Linkedlist"></a>Linkedlist</h1><h1 id="Tries"><a href="#Tries" class="headerlink" title="Tries"></a>Tries</h1><h1 id="Graph"><a href="#Graph" class="headerlink" title="Graph"></a>Graph</h1><h3 id="Bipartition-x2F-2-Colorble"><a href="#Bipartition-x2F-2-Colorble" class="headerlink" title="Bipartition&#x2F;2 Colorble"></a>Bipartition&#x2F;2 Colorble</h3><p> &#x2F;886. Possible Bipartition is very interesting question to test your understanding of bipartition.</p><h1 id="Backtracking"><a href="#Backtracking" class="headerlink" title="Backtracking"></a>Backtracking</h1><h1 id="Heap"><a href="#Heap" class="headerlink" title="Heap"></a>Heap</h1><h1 id="Array-amp-Hashing"><a href="#Array-amp-Hashing" class="headerlink" title="Array &amp; Hashing"></a>Array &amp; Hashing</h1><h1 id="Two-Pointer"><a href="#Two-Pointer" class="headerlink" title="Two Pointer"></a>Two Pointer</h1><h1 id="References"><a href="#References" class="headerlink" title="References:"></a>References:</h1><p><a href="https://zhuanlan.zhihu.com/p/45986027">Divide and Conquer</a></p>]]></content>
      
      
      
        <tags>
            
            <tag> algorithm note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE 2231 Midterm 1 review</title>
      <link href="/2022/12/19/CSE%202231%20midterm%201%20review/"/>
      <url>/2022/12/19/CSE%202231%20midterm%201%20review/</url>
      
        <content type="html"><![CDATA[<h1 id="Mathematic-models"><a href="#Mathematic-models" class="headerlink" title="Mathematic models"></a>Mathematic models</h1><p>Each Variable in the <strong>program has a type</strong> (“program type”)</p><p>​e.g. int, double, …</p><p>Each program type has a <span style="color:Red"><strong>mathmatical type</strong></span>.  that <strong>model</strong> it: any variable of that program type as having a value from its mathematical model’s mathematical space&#x2F;domain:</p><p>​e.g. integer, real, whole number</p><table><thead><tr><th>Program type</th><th align="left">Mathematical type</th></tr></thead><tbody><tr><td>boolean</td><td align="left">boolean</td></tr><tr><td>char</td><td align="left">character</td></tr><tr><td>int</td><td align="left">Integer (-2147483648 through 2147483647)</td></tr><tr><td>double</td><td align="left">real (about ±10±308, 15 significant digits)</td></tr><tr><td>String</td><td align="left">string of character Rep: &lt;&gt;</td></tr><tr><td>NaturalNumber</td><td align="left">Integer (non-negative)</td></tr><tr><td>Queue&lt;T&gt;</td><td align="left">string of T Rep: &lt;&gt;</td></tr><tr><td>Stack&lt;T&gt;</td><td align="left">string of T Rep: &lt;&gt;</td></tr><tr><td>Sequence&lt;T&gt;</td><td align="left">stirng of T Rep: &lt;&gt;</td></tr><tr><td>Set&lt;T&gt;</td><td align="left">finite set of T  Rep:  <strong>{ }</strong> or by <strong>empty_set</strong></td></tr><tr><td>Map&lt;K,V&gt;</td><td align="left">finite set of (K,V) (with function property)</td></tr><tr><td>BinaryTree<T></td><td align="left">binary tree of T</td></tr><tr><td>SortingMachine</td><td align="left">ordered triple (a.k.a. three-tuple): a boolean, a binary relation on T, and a finite multiset of T.</td></tr></tbody></table><p>*****Vacuously True:  p &#x3D;&gt; q where p&#x3D; false q &#x3D; false, then p &#x3D;&gt; q is true.</p><p>string of T : &lt;t1, t2, t3&gt;</p><p>set of T: {1,2, 3}</p><p>Entries of a String:  The set whose elements are exactly the entries of a string s (i.e., the string’s entries without duplicates and ignoring order) is denoted by entries(s)</p><p>e.g. : entries(&lt; 2, 2, 2, 1 &gt;) &#x3D; { 1, 2 }, entries(&lt; &gt;) &#x3D; { }</p><h1 id="Abstract-Classes"><a href="#Abstract-Classes" class="headerlink" title="Abstract Classes"></a>Abstract Classes</h1><h2 id="introduce-of-abstract-classes"><a href="#introduce-of-abstract-classes" class="headerlink" title="introduce of abstract classes"></a>introduce of abstract classes</h2><p>The Secondary abstract class is an incomplete class that covers some redundancy methods we don’t have to write again in our subclass. </p><p>e.g. the add method between NaturalNumber and NaturalNumber, we don’t have to know what’s the <strong>represent</strong> inner the NaturalNumber’s child method, because the add method is <strong>using the implemented method from the child method to finish add operation</strong></p><h2 id="Object"><a href="#Object" class="headerlink" title="Object"></a>Object</h2><p>Every class in Java extends Object, which is a special built-in class that provides default implementations for the following instance methods (among a few others that are not so important):</p><ul><li>boolean equals(Object obj)  <ul><li>The default implementation in <strong>Object checks reference equality</strong>, though we expect object value equality! So, we (almost always) need to override this method.</li></ul></li><li>int hashCode()<ul><li>The default implementation in Object <strong>returns an int</strong> that <strong>depends</strong> on the <strong>reference value of this</strong>, though we expect it to depend on the object value! So, we (almost always) need to override this method.</li></ul></li><li>String toString()<ul><li>The default implementation in Object <strong>returns a String</strong> that shows the <strong>reference value of this,</strong> though we expect it to show the object value! So, we (almost always) need to override this method</li></ul></li></ul><p>Java permits you to write a kind of “partial” or “<strong>incomplete</strong>” class that <strong>contains</strong> <strong>bodies</strong> for <strong>some</strong> <strong>but</strong> (typically) not all of the methods of the interfaces it claims to implement</p><p>​Because some methods still <strong>might not have bodies</strong>, Java <strong>WILL NOT</strong> let you <strong>instantiate</strong> an abstract class; that is, you <strong>cannot</strong> use an abstract class like a normal class and <strong>create a new object</strong> from it.</p><p>Every <strong>class(include normal class and abstract class)</strong> to Object class’s relationshipt is <strong>implicit</strong>, which means : every class that does not extend some other class directly extends Object.</p><p>e.g. NaturalNumberSecondary</p><p>This abstract class has code that overrides the default implementations (inherited from Object) of equals, hashCode, and toString for NaturalNumbers, so they do “the right thing”, i.e., <strong>so their behaviors are based on object values rather than reference values.</strong></p><p>This abstract class also <strong>has code that implements all the methods introduced in the NaturalNumber interface(add, derement, increment, etc.)</strong> but not those inherited by it from other interfaces – Details of this code later… see “Resources” </p><p>– Note that this still <strong>leaves the methods</strong> introduced in the <strong>Standard</strong> and <strong>NaturalNumberKernel</strong> interfaces without bodies; hence, it’s an abstract class</p><p>Secondary abstract class leaves kernal classes with few  standard class method</p><pre><code>- Standard (i.e., newInstance, clear, and transferFrom) - – NaturalNumberKernel (i.e., multiplyBy10, divideBy10, and isZero)</code></pre><h4 id="Why-we-need-Abstract-classes"><a href="#Why-we-need-Abstract-classes" class="headerlink" title="Why we need Abstract classes?"></a>Why we need Abstract classes?</h4><p>Factoring Out Common Code -&gt; reduce redundancy code</p><p><strong>Some Method bodies that can be written once and work for any implementation of</strong> NaturalNumberKernel because <strong>they are programmed to that interface</strong>—have been <strong>factored out into an abstract class</strong></p><blockquote><p>Yes, NaturalNumber interface is extends the NaturalNumberKernal interface, we programmed everything based on NaturalNumberKernal. If NaturalNumberKernal methods work, then our  NaturalNumber methods should works too.</p></blockquote><blockquote><p>Keep “factored out into an abstract class” think that to move out all common factor code to abstract class</p></blockquote><p>Therefore, This leaves only constructors and a few kernel methods to be implemented in NaturalNumber1L, NaturalNumber2, and future kernel classes (if any)</p><p>The code in each kernel class (e.g., in the example <strong>NaturalNumber1L</strong> and NaturalNumber2) implements only 4 constructors and 6 methods each, not all 21 methods of NaturalNumber </p><p> But, implementing these <strong>few methods</strong> is <strong>different</strong> than implementing the other 15 layered methods where you can call the <strong>kernel methods(The methods we impelment from our kernel class)</strong> to do the work!</p><h1 id="JUnit-Test-Fixture-Pattern"><a href="#JUnit-Test-Fixture-Pattern" class="headerlink" title="JUnit Test Fixture Pattern"></a>JUnit Test Fixture Pattern</h1><h2 id="Problem"><a href="#Problem" class="headerlink" title="Problem"></a>Problem</h2><p>(UUT)Unit Under Test is not enough to test every kernel class.</p><p>Every time we trying to run test fixtrue for different kernel class, we have to modify all the test cases.</p><h2 id="Solution"><a href="#Solution" class="headerlink" title="Solution"></a>Solution</h2><p>Single-Point control over change</p><p>“Re-route” all UUT constructor calls to <strong>another method</strong>, which <strong>then calls the UUT constructor</strong>, so only the body of that <strong>one method needs to be changed</strong> to accommodate a different UUT</p><p>Instead of calling the UUT’s constructor directly here, you call a method (perhaps named constructorTest), which then calls the UUT’s constructor.</p><p>There is constructorTest and constructorRef, if there is reference implementation of the same interface</p><h3 id="Isolating-This-Change-Point"><a href="#Isolating-This-Change-Point" class="headerlink" title="Isolating This Change Point"></a>Isolating This Change Point</h3><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220924204004644.png" alt="image-20220924204004644" style="zoom: 33%;" /><p>makes the test cases class become abstract class, then we could implement our constructorTest and constructorRef method in the child Class. We could test different initial constructor by create different child class of test cases class.</p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220924204251678.png" alt="image-20220924204251678" style="zoom:33%;" /><h3 id="protected-and-Abstract-method-keyword"><a href="#protected-and-Abstract-method-keyword" class="headerlink" title="protected and Abstract method keyword"></a>protected and Abstract method keyword</h3><p>​protecteed means that this method may be called or overridden in a subclass (which is our intent for Stack1LTest), but may not even be called from any other class declared outside this package. It could called the method in the same package</p><p>​<strong>abstract in the method</strong> means this method <strong>must</strong> be <strong>overridden</strong> in some subclass.</p><h4 id="Why-we-use-protected-and-abstract-here"><a href="#Why-we-use-protected-and-abstract-here" class="headerlink" title="Why we use protected and abstract here?"></a>Why we use protected and abstract here?</h4><p>​我们需要在当前testcases class里面调用这个method, 但是这个method还没有被重写, 所以我们需要保证constructorTest and constructorRef在subclass里面被重写. Protected保证了当前method能被当前包所有类内访问</p><h3 id="How-about-we-want-to-start-with-some-args-in-our-test-kernel-class"><a href="#How-about-we-want-to-start-with-some-args-in-our-test-kernel-class" class="headerlink" title="How about we want to start with some args in our test kernel class?"></a>How about we want to start with some args in our test kernel class?</h3><p>In a typical test case, it takes many lines of code just to construct the values on which to run a test!<br>For instance, suppose you want to test a method with this Stack<String> value as input: &lt;”a”, “stack”, “with”, “stuff”&gt;</p><p>So! we need a Convenience Method (or helper method) to help us using constructorTest and constructorRef return a instance and add some input to the instance</p><h4 id="varargs"><a href="#varargs" class="headerlink" title="varargs"></a>varargs</h4><p>​e.g. Object… String… int… allow programmer to cal this method with zero or more arguments of type String.</p><h1 id="Kernel-Implements-I-kernel-method"><a href="#Kernel-Implements-I-kernel-method" class="headerlink" title="Kernel Implements I (kernel method?)"></a>Kernel Implements I (kernel method?)</h1><p>Interpretation of Representation</p><p>e.g. : For QueueKernel, one idea is to represent a Queue variable’s value by using a java.util.List variable</p><p>​By convention (of the OSU CSE components), a kernel class that directly represents the new type using a component from the Java libraries that is very similar, has a name ending in “L”</p><p>​– In this case, it is called Queue1L</p><p>For Queue</p><p>What existing components (including builtin types of Java, and the Java libraries) could you build it on top of?</p><p>​– In other words, what could you use as a <strong>data representation</strong> that could be <strong>interpreted as a Queue value?</strong></p><h1 id="Version-Control-Using-Subversion"><a href="#Version-Control-Using-Subversion" class="headerlink" title="Version Control Using Subversion"></a>Version Control Using Subversion</h1><p>In team project, best practice is using version control system</p><p>​this is not limit to code, a version control system can handle non-code file as well</p><h2 id="Key-idea-the-Repository"><a href="#Key-idea-the-Repository" class="headerlink" title="Key idea : the Repository"></a>Key idea : the Repository</h2><p>A <strong>central repository(Or remote repository, e.g. github is remote repository)</strong> keeps all files (in our case, Java code) and a history of all modifications to them</p><ul><li>A new team member can <strong>check out</strong> their own private copy from the repository</li><li><strong>Each member</strong> can <strong>update</strong> their own copy to reflect the latest changes in the repository <ul><li>e.g pull from remote repository</li></ul></li><li><strong>Each member</strong> can <strong>commit</strong> changes from their own private copy to the repository</li></ul><h3 id="How-work-gets-done"><a href="#How-work-gets-done" class="headerlink" title="How work gets done?"></a>How work gets done?</h3><p>Repository holds <strong>master copy</strong> of all files </p><p>​– Never edited directly </p><p>​– Stores complete history, too!</p><p>Each team member has a <strong>local copy</strong> (or <strong>working copy</strong>) in their own workspace </p><p>​– All file creation, editing, deletion occurs here</p><p>Update and commit commands are used to <strong>synchronize</strong> local and master copies</p><h3 id="The-Optimistic-Model"><a href="#The-Optimistic-Model" class="headerlink" title="The Optimistic Model"></a>The Optimistic Model</h3><p>Any team member can modify their local copy of any file at any time </p><p>​– No “locking” or other synchronization among team members takes place on local copies</p><p>​note: 本地的修改不回影响到队员之间的同步, 及 其他人并不需要等待某一个人完成修改</p><p>On an <strong>update</strong>, the latest version from the repository often can be <strong>merged</strong> automatically into the local copy</p><p>​– This is especially so when team members edit different files, so conflicts are rare</p><p>​note: merge the file</p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220924213559780.png" alt="image-20220924213559780" style="zoom: 33%;" /><p>check the progress of update and commit on the slide <a href="http://web.cse.ohio-state.edu/software/2231/web-sw2/extras/slides/04a.Version-Control.pdf">version control</a></p><h1 id="Kernel-Implementations-II"><a href="#Kernel-Implementations-II" class="headerlink" title="Kernel Implementations II"></a>Kernel Implementations II</h1><h3 id="Design-Trade-offs"><a href="#Design-Trade-offs" class="headerlink" title="Design Trade-offs"></a>Design Trade-offs</h3><p>As the implementer of a kernel class, it is entirely <strong>up to you</strong> <strong>how to represent every value allowed</strong> by <strong>the mathematical model</strong> in the <strong>kernel interface</strong>!</p><p>Some designs will make the code for the methods you need to write:</p><p> – Easier to understand and make correct</p><p> – More efficient</p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220924214309879.png" alt="image-20220924214309879"></p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220924214320470.png" alt="image-20220924214320470"></p><p>The implementer see different than the client.</p><p>Think about NaturalNumber</p><p>Represent It Using a String (above view)?</p><p>Represent It Using a Array?</p><p>Represent It Using a string? (mathematical model)</p><p>​NaturalNumber as a string of integer whose entries are the digits of that number</p><p>​e.g. &lt;1,2,3&gt; as NN 123</p><p>​Note: that here we are thinking of a possible mathematical model of the representation, <strong>not in terms of a specific Java component</strong> family</p><p>​The advantage to think this way -&gt; there are serveral component with this mathematical model</p><h1 id="Sequence-On-Two-Stacks"><a href="#Sequence-On-Two-Stacks" class="headerlink" title="Sequence On Two Stacks ***"></a>Sequence On Two Stacks ***</h1><p>Have to look at HW and PPT</p><h1 id="Kernel-Implementations-III"><a href="#Kernel-Implementations-III" class="headerlink" title="Kernel Implementations III"></a>Kernel Implementations III</h1><p>Two major question related to kernel class(mention: kernel class is the subclass of secondary that we only focus how to implements kernel interface method and standard interface method, other than that, anything from normal interface under the kernel interface is all base on the kernel interface API(methods))</p><ol><li>What <strong>data representation</strong> (a.k.a. data structure) should be used to represent a value of the new type being implemented?<ol><li>Two level thinking<ol><li>One is the level for which you are implementing a new kernel class • See the kernel interface for the new type you are creating<ol><li>tower of abstractions for,</li><li>what’s the data structure we are using to represent current class?</li></ol></li><li>The other is the level directly below the level for the new kernel class you are creating • See the interfaces for the types of the variables you are using to represent a value of the new type\<ol><li><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220924220257536.png" alt="image-20220924220257536"><ol><li>client view: See the kernel interface for a description of what the software behaves like, what the client sees.<ol><li>This is <strong>abstract state space</strong>: the set of all possible <strong>math model</strong> values as <strong>seen by a client</strong>.</li></ol></li><li>implementer view: See the kernel class for a description of how the software achieves its behavior. <ol><li>This is the <strong>concrete state space</strong>: the set of all possible math model values of the <strong>data representation</strong>.</li></ol></li></ol></li><li><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220924220307843.png" alt="image-20220924220307843"></li></ol></li></ol></li></ol></li><li>What <strong>algorithms</strong> should be used to manipulate that data representation to implement the contracts of the kernel methods?<ol><li><a href="http://web.cse.ohio-state.edu/software/2231/web-sw2/extras/slides/06.Kernel-Implementations-III.pdf">kernel 3</a> Restrict your attention to the <strong>states</strong> just before and just after a method call</li><li>which leads to a device called a <strong>commutative diagram</strong></li><li><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925202936404.png" alt="image-20220925202936404"><ol><li>top arrow: <strong>abstract transition</strong>: for each state <strong>before</strong> the call, where it might <strong>end up</strong> according to the <strong>method’s contract</strong>.</li><li>bottom arrow: This is the <strong>concrete transition</strong>: for each state before the call, where it might end up according to the <strong>method’s body</strong>.</li></ol></li><li><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925203458562.png" alt="image-20220925203458562"></li><li>Correctness<ol><li>The <strong>kernel class</strong> <strong>correctly implements the kernel interface</strong> if and only if, for <strong>every method</strong> and for every legal input state for that method, the method body (over-thenup) <strong>always results in a state that satisfies the method contract</strong> (up-then-over)</li></ol></li></ol></li></ol><h1 id="Kernel-Implementations-IV"><a href="#Kernel-Implementations-IV" class="headerlink" title="Kernel Implementations IV"></a>Kernel Implementations IV</h1><p>However, it is also <strong>important to record</strong> (document) the <strong>key design decisions</strong> illustrated in a commutative diagram, if they are not already recorded in the Java code itself</p><p>wo key design decisions that need to be recorded in (Javadoc) comments:</p><p>​The <strong>representation invariant</strong>: Which “configurations” of values of the instance variables can ever arise?</p><p>​The <strong>abstraction function</strong>: How are the values of the instance variables to be <strong>interpreted</strong> to get an <strong>abstract value</strong>?</p><h3 id="Commutative-Diagram"><a href="#Commutative-Diagram" class="headerlink" title="Commutative Diagram"></a>Commutative Diagram</h3><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925204119437.png"></p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925204416241.png" alt="image-20220925204416241"></p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925204432622.png" alt="image-20220925204432622"></p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925204544308.png" alt="image-20220925204544308"></p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925204633447.png" alt="image-20220925204633447"></p><p>Like this one</p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925205116685.png" alt="image-20220925205116685"></p><p>The <strong>representation invariant</strong> <strong>characterizes the values that the data representation</strong> (instance variables) <strong>might have at the end of each kernel method body, including the constructor(s)</strong></p><p>​The representation invariant is made to hold by the method bodies’ code, and it is recorded in the convention clause in a (Javadoc) comment for the kernel class</p><h3 id="Variable-Life-Cycle-Client"><a href="#Variable-Life-Cycle-Client" class="headerlink" title="Variable Life Cycle: Client"></a>Variable Life Cycle: Client</h3><ul><li>Declared</li><li>Initialized</li><li>Called</li><li>goes out of scope (destory)</li></ul><h3 id="representation-invariant"><a href="#representation-invariant" class="headerlink" title="representation invariant"></a>representation invariant</h3><p>@convention tag for representation Invariant</p><p><strong>$this</strong> is special notation to name the data representation of this in such comment</p><h3 id="Summarize"><a href="#Summarize" class="headerlink" title="Summarize"></a>Summarize</h3><ul><li>The constructor(s) must make the representation invariant true</li><li>The representation invariant may be <strong>assumed to be true at the beginning</strong> of each method body</li><li>Each method body must make the representation invariant true (again) a<strong>t the time it returns</strong></li></ul><p>The Abstraction Function: The abstraction function describes how to interpret any concrete value (that satisfies the representation invariant) as an abstract value</p><p>帮忙解释data rep to abstract value 的function</p><p>The abstraction function is not computed by any code, but is merely recorded in the correspondence clause in a (Javadoc) comment for the kernel class</p><h3 id="Kernel-Purity-Rule"><a href="#Kernel-Purity-Rule" class="headerlink" title="Kernel Purity Rule"></a>Kernel Purity Rule</h3><p>Kernel Purity Rule — <strong>No constructor or method body in the kernel class</strong> should c<strong>all any public method</strong> from the <strong>same component</strong> family</p><p>​Every public method in the component family relies (for its correctness) on the representation invariant being satisfied when it is called, and this might not be true when a call is made from inside a method of the kernel class</p><p>​Implications of the kernel purity rule: </p><p>​– No public kernel method should call any other public kernel method from the same class </p><p>​– No public kernel method should call itself recursively </p><p>​– No method (public or private) in the kernel class should call any layered&#x2F;secondary method from the same component family</p><h1 id="Hashing"><a href="#Hashing" class="headerlink" title="Hashing"></a>Hashing</h1><p>Before we all using linear algorithm to search add or remove</p><p>Instead of searching through all the items, store the items in many smaller buckets and search through only one bucket that</p><h3 id="How-To-Identify-The-Bucket"><a href="#How-To-Identify-The-Bucket" class="headerlink" title="How To Identify The Bucket"></a>How To Identify The Bucket</h3><p><strong>h(x) mod m</strong> this method giving a index of some bucket</p><p>The function that maps each value of type T to an integer is called the <strong>hash function</strong> we guaranteed to get the index of some bucket</p><h4 id="hashCode-Method"><a href="#hashCode-Method" class="headerlink" title="hashCode Method"></a>hashCode Method</h4><p>the type <strong>Object</strong> defines this instance method to <strong>compute h</strong>, i.e., as the programmatic version of <strong>a hash function</strong>: public int hashCode()</p><p><strong>Note</strong>: As a best practice, nearly every type should override the default implementation of this method</p><p>hashCode always returns the same int hash value for the same Object Class (PhoneNumber class) value</p><h4 id="An-Empirical-Matter"><a href="#An-Empirical-Matter" class="headerlink" title="An Empirical Matter"></a>An Empirical Matter</h4><p> • How well hashing distributes the data among buckets depends, in part, on the data themselves </p><p>• Your worst enemy, knowing your hash function, could always provide data that would result in no performance gain over linear search </p><p><strong>– Everything might fall into one bucket…</strong></p><h1 id="Binary-Tree"><a href="#Binary-Tree" class="headerlink" title="Binary Tree"></a>Binary Tree</h1><h3 id="❌Haven’t-solve-What’s-the-Binary-Tree’s-Mathematical-value"><a href="#❌Haven’t-solve-What’s-the-Binary-Tree’s-Mathematical-value" class="headerlink" title="(❌Haven’t solve)What’s the Binary Tree’s Mathematical value?"></a>(❌Haven’t solve)What’s the Binary Tree’s Mathematical value?</h3><p>binary Tree! Of course BinaryTree’s Mathematical model is binary tree!</p><h3 id="Traversal-Orders"><a href="#Traversal-Orders" class="headerlink" title="Traversal Orders"></a>Traversal Orders</h3><ul><li><p>Pre-order: root is visited before left and right</p></li><li><p>In-order: root is visited between left and right (this order iterator in BinaryTree)</p></li><li><p>Post-order: root is visited after left and right</p></li></ul><h1 id="Binary-Search-Tree-BST"><a href="#Binary-Search-Tree-BST" class="headerlink" title="Binary Search Tree (BST)"></a>Binary Search Tree (BST)</h1><p>BST are general </p><p>BSTs may be used to search for items of any type T for which <strong>one has defined a total preorder</strong>, i.e., a <strong>binary relation</strong> on T that is <strong>total</strong>, <strong>reflexive</strong>, and <strong>transitive</strong></p><ul><li>A <strong>binary relation</strong> on T may be viewed as a set of ordered pairs of T, or as a <strong>boolean-valued</strong> function <strong>R</strong> of two parameters of type T that is true iff that pair is in the set</li><li>total : R(x, y) or R(y, x)</li><li>Reflexive R(x, x)</li><li>Transitive: if R(a, b) and R(b, c) then R(a, c)</li></ul><p>e.g. kind of example </p><ol><li>T &#x3D; Integer</li><li>The ordering is &lt;&#x3D; </li><li>For simplicity we assume that no two nodes in a BST have the same labels</li></ol><p>Note: Both these simplifications are inessential: BSTs are not limited to these situation</p><h4 id="difference-between-normal-binary-tree-and-binary-search-tree"><a href="#difference-between-normal-binary-tree-and-binary-search-tree" class="headerlink" title="difference between normal binary tree and binary search tree"></a>difference between normal binary tree and binary search tree</h4><p>A binary tree is a BST whenever the arrangement of node labels satisfies these two properties:</p><ol><li>For every node in the tree, if its label is x and if y is a label in that node’s left subtree, then y &lt; x</li><li>For every node in the tree, if its label is x and if y is a label in that node’s right subtree, then y &gt; x</li></ol><p>Binary Tree:</p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925231059897.png" alt="image-20220925231059897"></p><p>Binary Search Tree:</p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925231141223.png" alt="image-20220925231141223"></p><h1 id="SortingMachine-have-to-look"><a href="#SortingMachine-have-to-look" class="headerlink" title="SortingMachine (have to look)"></a>SortingMachine (have to look)</h1><p>The SortingMachine component family allows you to add elements of type T to a collection of such elements, and then to remove them one at a time in sorted order according to a client-supplied ordering</p><p><img src="https://raw.githubusercontent.com/Sma1lboy/CSE2231/main/Assists/imgs/image-20220925233937355.png" alt="image-20220925233937355"></p><h4 id="Time-based-vs-Values-based"><a href="#Time-based-vs-Values-based" class="headerlink" title="Time based vs Values based"></a>Time based vs Values based</h4><p>FIFO and LIFO are time-based orderings</p><p>osu.SortingMachine uses a value-based ordering.</p><p>The mathematical model is an ordered triple (a.k.a. three-tuple): a boolean, a binary relation on T, and a finite multiset of T.</p><p>***Recall: a binary relation on T may be viewed as a <strong>set of ordered pairs of T</strong>, or as a <strong>boolean-valued function R of two parameters of type T</strong> that is true iff that pair is in the set.</p><p>A <strong>finite multiset</strong> is essentially a <strong>finite set</strong> with <strong>multiple copies</strong> of elements allowed, so there are effectively (nonnegative) “counts” of all values of the element type T; details as necessary</p><h1 id="reference-link"><a href="#reference-link" class="headerlink" title="reference link"></a>reference link</h1>]]></content>
      
      
      
        <tags>
            
            <tag> CSE2231 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE 2231 final review</title>
      <link href="/2022/12/19/CSE2231%20Final%20Exam/"/>
      <url>/2022/12/19/CSE2231%20Final%20Exam/</url>
      
        <content type="html"><![CDATA[<h1 id="Final-Review"><a href="#Final-Review" class="headerlink" title="Final Review"></a>Final Review</h1><h2 id="Java-Interface"><a href="#Java-Interface" class="headerlink" title="Java Interface"></a>Java Interface</h2><h3 id="Interface-may-be-used-to-define"><a href="#Interface-may-be-used-to-define" class="headerlink" title="Interface may be used to define:"></a>Interface may be used to define:</h3><ul><li>instance methods</li><li>static final variables<ul><li>it is unusual for an interface to define variables</li></ul></li><li>No constructors</li><li>no static methods</li><li>no instance variables</li></ul><h3 id="Core-interface-kernel"><a href="#Core-interface-kernel" class="headerlink" title="Core interface  (kernel)"></a>Core interface  (kernel)</h3><p>Its our kernel interface</p><ul><li>– The mathematical model for the type</li><li>– Contract(s) for the constructor(s)</li><li>– Contract(s) for kernel methods</li><li>– Contract(s) for methods inherited from Java library interfaces that do not have their own contract specifications (if applicable; e.g., an iterator or a comparator)</li><li>The enhanced interface defines contracts for all other methods for the type</li></ul><h3 id="Kernel-interface-design-guidelines"><a href="#Kernel-interface-design-guidelines" class="headerlink" title="Kernel interface design guidelines"></a>Kernel interface design guidelines</h3><p>Kernel methods generally should be:</p><ul><li>A minimal set of methods that is functionally complete, i.e., powerful enough to:<ul><li>Give a variable of the type any allowable value</li><li>Determine the value of a variable of the type</li></ul></li><li>Powerful enough to allow a client to:<ul><li>Implement equals and toString</li><li>Check every kernel method’s precondition</li></ul></li></ul><h3 id="Enhance-interface"><a href="#Enhance-interface" class="headerlink" title="Enhance interface"></a>Enhance interface</h3><p>most powerful interface</p><h3 id="Notice-there-is-Circularity"><a href="#Notice-there-is-Circularity" class="headerlink" title="Notice there is Circularity"></a>Notice there is Circularity</h3><p>Java permit the circularity because</p><ol><li>Java <strong>interface</strong> define as <strong>type</strong>, i.e., the type name along with the set of its instance methods</li><li>An interface type may be used in Java <strong>even if there is no implementation</strong> of it in scope</li></ol><p>Interfaces are a compile-time construct</p><ul><li>– Used by the Java compiler for type-checking with declared types: to make sure variables are used only where they make sense • <ul><li>Recall the rules for declared types and object (dynamic) types <ul><li>The declared type of a variable may be an interface type </li><li>The object type can never be an interface type, because you may not instantiate a variable using new followed by an interface type</li><li>If the declared type is an interface type, then the object type (a class) must implement the declared type (an interface</li></ul></li></ul></li><li>– Once a Java program compiles, only object types are kept at run-time <ul><li>• Declared types literally “disappear” in the JVM</li></ul></li></ul><h3 id="Packages"><a href="#Packages" class="headerlink" title="Packages"></a>Packages</h3><p>Each OSU CSE component family is bundled into its own package, i.e., a grouping of interfaces and classes that the designer thinks “belong together” for logical reasons</p><p> – Example: the Queue-family components are all in the package components.queue</p><p>A package provides:</p><ol><li>– Logical structuring: packages are hierarchical, i.e., you may have packages within packages</li><li>A namespace: units in different packages may have the same name without conflict • See also import statements</li><li>Another level of access control between public and private</li></ol><h2 id="Object-class-method"><a href="#Object-class-method" class="headerlink" title="Object class method"></a>Object class method</h2><h3 id="Common-Method-from-Object"><a href="#Common-Method-from-Object" class="headerlink" title="Common Method from Object"></a>Common Method from <strong>Object</strong></h3><p>Eevery Java class implicitly extends the class Object, which defines the following methods and provides default implementations that you should override: </p><ul><li>boolean equals(Object obj)</li><li>int hashCode() </li><li>String toString()</li></ul><h3 id="Default-implmentation-of-equals-hashCode-and-toString"><a href="#Default-implmentation-of-equals-hashCode-and-toString" class="headerlink" title="Default implmentation of equals, hashCode ,and toString"></a>Default implmentation of equals, hashCode ,and toString</h3><ol><li>equals <ol><li>Default implementation of equals: “for any non-null reference values x and y, this method [i.e., x.equals(y)] returns true if and only if x and y refer to the same object (x &#x3D;&#x3D; y has the value true).”</li></ol></li><li>hashCode<ol><li>“typically implemented by converting the internal address of the object into an integer, but this implementation technique is not required by the JavaTM programming language</li></ol></li><li>toString<ol><li>Default implementation of toString: “returns a string consisting of the name of the class of which the object is an instance, the at-sign character ‘@’, and the unsigned hexadecimal representation of the hash code of the object.”</li></ol></li></ol><p>Object cannot possibly know anything about the abstract mathematical model values (i.e., the object values) of variables</p><h3 id="The-Crux-of-the-Problem"><a href="#The-Crux-of-the-Problem" class="headerlink" title="The Crux of the Problem"></a>The Crux of the Problem</h3><ul><li>Object cannot possibly know anything about the <strong>abstract mathematical model values</strong> (i.e., the object values) of variables<ul><li>which means the equal method compare reference value , maybe its not what the developer wants to compare with.</li><li>equals, hashCode, and toString should all behave in ways that depend on these abstract mathematical model values</li></ul></li></ul><h3 id="Way-Implementation-equals-hashCode-and-toString"><a href="#Way-Implementation-equals-hashCode-and-toString" class="headerlink" title="Way Implementation equals, hashCode ,and toString"></a>Way Implementation equals, hashCode ,and toString</h3><ol><li><p>equals</p><ol><li><p>There are a couple ways to approach this, but best practice suggests a multi-step “filtering” approach that first <strong>weeds out special cases</strong></p><ol><li><p>If the reference values of obj and this are equal </p></li><li><p>: If obj is null, then its object value does not equal the object value of this.</p></li><li><p>If the types of obj and this are not the same, then their object values are not equal</p><ol><li><p>Java gives us a way to check a slightly more general interpretation of “types are not the same”, which is better for this purpose than checking whether dynamic types are the same</p><p>instanceof Operator helps check the dynamic type</p></li></ol></li></ol></li></ol></li></ol><h3 id="Steps-to-implements-equal-method"><a href="#Steps-to-implements-equal-method" class="headerlink" title="Steps to implements equal method"></a>Steps to implements equal method</h3><p>There are a couple ways to approach this, but best practice suggests a multi-step “<strong>filtering</strong>” approach that first weeds out special cases</p><ol><li>Step1: if the Reference value of Object obj and this are equal, then return true</li><li>Step2: if the obj is null then it’s object value is not equal to this, then return false</li><li>Step3: if the type of obj and this are not same, then they are not equal<ol><li>using instance of to check<ol><li>how about collections? wo we have to use raw type, every type erasure will become object class type</li></ol></li></ol></li></ol><h3 id="Type-Erasure"><a href="#Type-Erasure" class="headerlink" title="Type Erasure"></a>Type Erasure</h3><p>For generic types, the JVM keeps track of the raw type (e.g., Queue1L or Queue2) of each variable as its dynamic type, but does not keep track of any generic type parameters (e.g., for this variable T is Integer, for that variable T is String)</p><p>This mechanism is called type erasure – Effectively (but not technically), the type parameter is replaced by Object</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">if (!(obj instanceof XYZ&lt;?&gt;))</span><br><span class="line">//This checks whether obj has a dynamic type that implements “XYZ of unknown”, which is all the JVM knows about.</span><br></pre></td></tr></table></figure><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">//Step 1</span><br><span class="line">if (obj == this) &#123;</span><br><span class="line">return true;</span><br><span class="line">&#125;</span><br><span class="line">//Step 2</span><br><span class="line">if (obj == null) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">//Step 3</span><br><span class="line">if (!(obj instanceof XYZ&lt;?&gt;)) &#123;</span><br><span class="line">return false;</span><br><span class="line">&#125;</span><br><span class="line">//Now it&#x27;s time to casting</span><br><span class="line">XYZ&lt;?&gt; x = (XYZ&lt;?&gt;) obj; //we limit ourselves to using XYZKernel methods to determine whether their mathematical model values are equal.</span><br></pre></td></tr></table></figure><h3 id="Two-Remaining-Problems"><a href="#Two-Remaining-Problems" class="headerlink" title="Two Remaining Problems"></a>Two Remaining Problems</h3><ol><li>What if the loop doesn’t execute at all because q and this are both empty (but with different entry types)?<ol><li>There is no apparent way around this in Java!</li></ol></li><li>What happens with an “unordered” math model type, e.g., Set or Map?<ol><li>– A slightly bigger mess, but it can be handled</li></ol></li></ol><h2 id="Java-Collections-Framework"><a href="#Java-Collections-Framework" class="headerlink" title="Java Collections Framework"></a>Java Collections Framework</h2><h3 id="Views-in-the-JCF"><a href="#Views-in-the-JCF" class="headerlink" title="Views in the JCF"></a>Views in the JCF</h3><p>Views for Map: </p><ul><li>– Keys: Set<T> keySet()</li><li>– Values: Collection <T> values() </li><li>– Pairs: Set&lt;Map.Entry&lt;K,V&gt;&gt; entrySet()</li></ul><h3 id="View-“Backed-By”-Collection"><a href="#View-“Backed-By”-Collection" class="headerlink" title="View “Backed By” Collection"></a>View “Backed By” Collection</h3><p>A view is <strong>backed by the underlying</strong> collection, which means that <strong>if the view is modified</strong> then the underlying (“backing”) <strong>collection is also modified</strong>, and vice versa</p><h3 id="Could-remove-Cause-Trouble"><a href="#Could-remove-Cause-Trouble" class="headerlink" title="Could remove Cause Trouble?"></a>Could remove Cause Trouble?</h3><p>Could the optional remove method <strong>not be supported</strong> by the object type of m.values()?</p><p>Yes! <strong>BUT</strong></p><ul><li>Yes! But only when the backing Map does not support remove(). Otherwise, it is supported because the informal Javadoc for the values method says: “The collection supports element removal, which removes the corresponding mapping from the map, via the Iterator.remove, Collection.remove, removeAll, retainAll and clear operations. It does not support the add or addAll operations</li><li>Which means the remove method come from</li></ul><h2 id="Using-Iterators"><a href="#Using-Iterators" class="headerlink" title="Using Iterators"></a>Using Iterators</h2><h3 id="JCF-Iterator-Rule"><a href="#JCF-Iterator-Rule" class="headerlink" title="JCF Iterator Rule"></a>JCF Iterator Rule</h3><p>When <strong>iterating over</strong> a <strong>collection</strong> with an iterator (explicitly or implicitly with a for‐each loop), <strong>do not call any methods on the collection</strong> and <strong>do not change the value of any of the elements</strong> of the collection (or the collection itself)</p><p>​The behavior of an iterator is unspecified if the underlying collection is modified while the iteration is in progress in any way other than by calling the iterator’s remove method.</p><h2 id="Java-Input-x2F-Output"><a href="#Java-Input-x2F-Output" class="headerlink" title="Java Input&#x2F;Output"></a>Java Input&#x2F;Output</h2><h3 id="I-x2F-O-Streams"><a href="#I-x2F-O-Streams" class="headerlink" title="I&#x2F;O Streams"></a>I&#x2F;O Streams</h3><ul><li><p>An <strong>input&#x2F;output stream</strong> is a (conceptually not necessarily finite) series of data items</p><ul><li>An <strong>input stream</strong> is a “flow” of data items from a <strong>source</strong> to a program<ul><li>The program <strong>reads</strong> from the source (or from the stream)</li></ul></li></ul></li><li><p>An <strong>output stream</strong> is a “flow” of data items from a program to a destination</p><ul><li>The program <strong>writes</strong> to the destination (or to the stream)</li></ul></li></ul><h3 id="Input-Streams"><a href="#Input-Streams" class="headerlink" title="Input Streams"></a>Input Streams</h3><p>Note:<strong>Source</strong> may be the <strong>keyboard</strong>, a file on disk, <strong>a physical device</strong>, <strong>another program</strong>, even an <strong>array</strong> or <strong>String</strong> in the same program.</p><h3 id="Output-Streams"><a href="#Output-Streams" class="headerlink" title="Output Streams"></a>Output Streams</h3><p><strong>Destination</strong> may be the <strong>console window</strong>, <strong>a file</strong> on disk, a physical device, another program, even an array or <strong>String</strong> in the same program.</p><h3 id="Input-with-keyboard"><a href="#Input-with-keyboard" class="headerlink" title="Input with keyboard"></a>Input with keyboard</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in));</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> input.readLine();</span><br><span class="line">    ...</span><br><span class="line">    input.close();</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure><p>At this point, we want to using the keyboard input be source, but the, System.in is a <strong>byte stream</strong>, so we have to <strong>wrap</strong> it.</p><p>At same time, method in java.io throw exception under certain circumstancesstances, and you need <strong>catch</strong> them</p><p>​either throw exception in the <strong>method header</strong> or <strong>using try-catch</strong></p><p><strong>InputStreamReader</strong></p><ul><li><p>An InputStreamReader is  bridge <strong>from byte streams to character streams</strong> It reads bytes and decodes them into characters using a specified charset (talk later). </p><ul><li>So it wrap System.in(a byte input stream) into a <strong>char stream reader (char input stream)</strong></li></ul>  <img src="./Assists/imgs/image-20221206164748288.png" alt="image-20221206164748288" style="zoom:33%;" /></li></ul><p><strong>BufferedReader</strong></p><ul><li>An BufferedReader <strong>reads text from a character-input stream</strong>, buffering characters so as to provide for the efficient reading of characters, arrays, and lines.</li></ul><p>That’s why we need three different class here…. so messssssss</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">InputStreamReader</span>(System.in))</span><br></pre></td></tr></table></figure><p>This technique of slightly extending features or <strong>capabilities of an object</strong> by <strong>wrapping</strong> it <strong>inside</strong> <strong>another object</strong> is a popular object-oriented design pattern called the <strong>decorator pattern.</strong></p><h3 id="An-Alternative-input-with-keyboard"><a href="#An-Alternative-input-with-keyboard" class="headerlink" title="An Alternative input with keyboard"></a>An Alternative input with keyboard</h3><p>using the Class from <code>java.util.Scanner</code></p><p>e.g</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">    <span class="type">Scanner</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Scanner</span>(System.in);</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> input.nextLine();</span><br><span class="line">    ...</span><br><span class="line">    input.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>Note: the wraping Class to help people read from keyboard, mention that method already wrapped for u so call readLine() instead call nextLine()</p><h3 id="Input-from-File"><a href="#Input-from-File" class="headerlink" title="Input from File"></a>Input from File</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="type">BufferedReader</span> <span class="variable">input</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedReader</span>(<span class="keyword">new</span> <span class="title class_">FileReader</span>(<span class="string">&quot;data/test.txt&quot;</span>));</span><br><span class="line">    <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> input.readLine();</span><br><span class="line">    ...</span><br><span class="line">    input.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h3 id="Console-Output"><a href="#Console-Output" class="headerlink" title="Console Output"></a>Console Output</h3><p>Ez to show</p><p><code>System.out.println(&quot;Hello world&quot;)</code></p><h3 id="File-Output-java-io"><a href="#File-Output-java-io" class="headerlink" title="File Output (java.io)"></a>File Output (java.io)</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">  </span><br><span class="line"><span class="type">PrintWriter</span> <span class="variable">output</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PrintWriter</span>(<span class="keyword">new</span> <span class="title class_">BufferedWriter</span> (<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;data/test.txt&quot;</span>)));</span><br><span class="line">output.print(<span class="string">&quot;foo&quot;</span>);</span><br><span class="line">output.println(<span class="string">&quot; and bar&quot;</span>);</span><br><span class="line">...</span><br><span class="line">output.close();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><ul><li><p><strong>FileWriter</strong></p><ul><li>FileWriter is used to writes text to character files using a default buffer size</li><li><strong>FileWriter is meant for writing streams of characters</strong> <ul><li>It’s a <strong>character output stream</strong> (Talk about later what’s the diff between char stream and byte stream)</li></ul></li></ul></li><li><p><strong>BufferedWriter</strong></p><ul><li>An BufferedWriter <strong>writes text to a character-output stream</strong>, buffering characters so as to provide for the efficient writing of single characters, arrays, and strings.<ul><li>It’s a text output stream</li></ul></li></ul></li><li><p><strong>PrintWriter</strong></p><ul><li><p>An PrintWriter <strong>prints formatted representations</strong> of objects <strong>to</strong> a text-output stream</p></li><li><p>For the foramtted, that’s why we want to use PrintWriter</p></li><li><p>It’s disgusting to directly using the method form BufferedWritter, we need some util format method! which come from PrintWriter</p></li><li><p>(not from this course)Note: ofc you can directly use the BufferedWriter, but remember to close writer</p>  <figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="type">BufferedWriter</span> <span class="variable">writer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedWriter</span>(<span class="keyword">new</span> <span class="title class_">FileWriter</span>(<span class="string">&quot;asdasd.txt&quot;</span>));</span><br><span class="line">writer.write(<span class="string">&quot;Hello World&quot;</span>);</span><br><span class="line">writer.close();</span><br></pre></td></tr></table></figure><p>  It’s <strong>inconvient</strong> to directly using BufferedWriter to wrap line :(</p></li></ul></li></ul><h3 id="IOException"><a href="#IOException" class="headerlink" title="IOException"></a>IOException</h3><h4 id="A-number-of-java-io-constructors-and-methods-might-throw-raise-an-IOException"><a href="#A-number-of-java-io-constructors-and-methods-might-throw-raise-an-IOException" class="headerlink" title="A number of java.io constructors and methods might throw (raise) an IOException"></a>A number of java.io constructors and methods might throw (raise) an IOException</h4><p>Examples:</p><p>​files to be used as sources destinations may not exist  may not be readable and&#x2F;or writeable by the user of the program etc.</p><h3 id="Standard-Stream"><a href="#Standard-Stream" class="headerlink" title="Standard Stream"></a>Standard Stream</h3><p>The utility class System in java.lang declares three standard streams:</p><ul><li>System.in</li><li>System.out</li><li>System.err</li></ul><p>You do not declare, open, or close these streams; but you can always use them without worrying about exceptions (Java already declare for you)</p><h3 id="Byte-and-Character-Streams"><a href="#Byte-and-Character-Streams" class="headerlink" title="Byte and Character Streams"></a>Byte and Character Streams</h3><p>note: I don’t think they gonna let u write code about byte stream</p><p>Java has two categories of streams:</p><ul><li>Byte streams are streams of 8-bit bytes <ul><li>This is a kind of low-level I&#x2F;O that you rarely need</li></ul></li><li>Character streams are streams of Unicode characters<ul><li>This is preferred for text I&#x2F;O because it accounts for the “local” character set and supports <strong>internationalization</strong> with little additional effort</li></ul></li></ul><p>Note : <strong>Best practice</strong> is to use character streams with textual I&#x2F;O</p><h3 id="Buffered-Streams"><a href="#Buffered-Streams" class="headerlink" title="Buffered Streams"></a>Buffered Streams</h3><p>Buffered streams <strong>minimize</strong> <strong>disk access</strong> for reading&#x2F;writing files, and generally have <strong>performance</strong> <strong>advantages</strong> over unbuffered streams</p><p>Best practice is to “wrap” input and output character streams to create buffered versions</p><p>I already show how it works and java standard description above</p><h3 id="Files-and-Paths"><a href="#Files-and-Paths" class="headerlink" title="Files and Paths"></a>Files and Paths</h3><p>The File class (an original part of Java) and the Path interface (new in Java 1.7) allow you to manipulate directories and files and the “paths” to them in the file system, e.g.:</p><ul><li>Check file existence and permissions, create files and set permissions, delete files, etc</li></ul><p>Note: just take a look </p><h2 id="Java-Loose-Ends"><a href="#Java-Loose-Ends" class="headerlink" title="Java Loose Ends"></a>Java Loose Ends</h2><p>Few Java issues introduced earlier deserve a more in-depth treatment:</p><ul><li>– Try-Catch and Exceptions </li><li>– Members (static vs. instance)</li><li>– Nested interfaces and classes</li><li>– Access modifiers – “Final”</li></ul><h3 id="Exceptions"><a href="#Exceptions" class="headerlink" title="Exceptions"></a>Exceptions</h3><p>An exception indicates a <strong>problem</strong> with an application that <strong>entails</strong> (in Java) <strong>a dramatic change of control flow</strong></p><p>Vocabulary: Exceptions (and Errors) are</p><ul><li>“thrown” by a component implementation</li><li>“caught” by a client</li></ul><h3 id="Syntax-of-Try-Catch"><a href="#Syntax-of-Try-Catch" class="headerlink" title="Syntax of Try-Catch"></a>Syntax of Try-Catch</h3><p>just <code>try&#123;&#125;catch(SOME_EXCEPTION e) &#123;&#125;</code> the ez one</p><p>you can keep catch different exception, e.g. </p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">try</span> &#123;</span><br><span class="line">statements</span><br><span class="line">&#125; <span class="keyword">catch</span>(exceptionType1 identifier1) &#123;</span><br><span class="line">handler <span class="keyword">for</span> type1</span><br><span class="line">&#125; <span class="keyword">catch</span>(exceptionType2 identifier2) &#123;</span><br><span class="line">handler <span class="keyword">for</span> type2</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p> If <strong>nothing</strong> is thrown during execution of the statements in the try block, try block finishes successfully and catch block will ignored, then the program keep going</p><p>if something is thrown exception:</p><ol><li>the rest of try block code is skipped</li><li>The catch clauses are <strong>examined</strong> <strong>top to bottom</strong> for the first <strong>matching catch</strong></li><li>If an appropriate catch clause is found: <ol><li>The body of the catch clause is executed</li><li>The remaining catch clauses are skipped</li></ol></li><li>If no such catch clause is found:<ol><li>The exception is thrown to the <strong>outer block</strong>, which is either<ol><li>A try block (that potentially handles it, in the same manner)</li><li>A method body (resulting in it being thrown to its client)</li></ol></li></ol></li></ol><p><strong>Best practice</strong> suggests exceptions should be <strong>reserved for unexpected</strong> situations:</p><ul><li>Problems external to the application<ul><li>there is a hardware problem with a disk drive</li></ul></li><li>Resource exhaustion<ul><li>(out of memo)</li></ul></li><li>Problems that cannot be handled with checkable preconditions in contracts<ul><li>Example: a file does not exist—because it has been deleted after its existence has already been “confirmed”.</li></ul></li></ul><h3 id="Hierarchy-of-Theowable"><a href="#Hierarchy-of-Theowable" class="headerlink" title="Hierarchy of Theowable"></a>Hierarchy of Theowable</h3><p>The diagram of Throwable</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/Assists/imgs/image-20221207000346698.png" alt="image-20221207000346698"></h3><p>The <strong>Throwable</strong> class is the <strong>superclass</strong> of <strong>all errors and exceptions in the Java language</strong>. Only objects that are instances of this class (or one of its subclasses) are thrown by the Java Virtual Machine or can be thrown by the Java throw statement.</p><h3 id="Unrecoverble-and-recoverble-error"><a href="#Unrecoverble-and-recoverble-error" class="headerlink" title="Unrecoverble and recoverble error"></a>Unrecoverble and recoverble error</h3><p>Note: An <strong>unrecoverable</strong> error is a type of error that <strong>cannot be fixed</strong> or resolved. This means that the <strong>system or program encountering the error</strong> will be unable to continue functioning properly, and may need to be restarted or shut down completely. A <strong>recoverable</strong> error, on the other hand, <strong>is an error that can be fixed</strong> or resolved <strong>without disrupting the operation of the system or program.</strong> In most cases, a recoverable error will allow the system or program to continue running, but it may require some corrective action on the part of the user or the system itself to fix the problem.</p><p><strong>In OSU</strong></p><p>“<strong>Unrecoverable</strong>”: hardware, JVM, or application error (e.g., “out of memory)</p><p>​You have to restart computer or change ur hardware</p><p>“<strong>Recoverable</strong>”: application problem (e.g., “file not found”)</p><p>​You can just reenter the file address</p><h3 id="Few-Error-and-exception"><a href="#Few-Error-and-exception" class="headerlink" title="Few Error and exception"></a><strong>Few Error and exception</strong></h3><p><img src="/Assists/imgs/image-20221207001418385.png" alt="image-20221207001418385"></p><h3 id="Unchecked-vs-Checked"><a href="#Unchecked-vs-Checked" class="headerlink" title="Unchecked vs. Checked"></a>Unchecked vs. Checked</h3><ul><li><p><strong>Unchecked</strong> exceptions are:</p><ul><li>– <strong>Error</strong> and its subclasses</li><li><strong>RuntimeException</strong> and its subclasses</li></ul></li><li><p>The rest are <strong>checked</strong> exceptions</p><ul><li><p>“Checked” means that the compiler checks that a method whose body contains a statement that might throw the exception either <strong>catches</strong> it, or explicitly “propagates it up the call chain” by declaring that it also <strong>throws</strong> the exception</p><p><strong>For example:</strong> if you using <strong>BufferedReader</strong>, you have <strong>either</strong> <strong>catch</strong> or <strong>throws</strong>, because BufferedReader may cause IOException</p></li></ul></li></ul><h3 id="Members"><a href="#Members" class="headerlink" title="Members"></a>Members</h3><p>A class may have different kinds of members:</p><ol><li>Variables&#x2F;fields&#x2F;data members</li><li>Constructors</li><li>Methods </li><li>Nested classes</li></ol><p> All except constructors may be either <strong>static members</strong> or *<em>instance members</em></p><p>Note: <strong>static members</strong> of  a class also call <strong>class members</strong>(There are a lot different way to call it, just do whatever you want, <strong>static field</strong> or <strong>static variable,</strong> or just <strong>static members</strong>, or just <strong>class members</strong>)</p><h3 id="Static-vs-Instance-Variables"><a href="#Static-vs-Instance-Variables" class="headerlink" title="Static vs. Instance Variables"></a>Static vs. Instance Variables</h3><p> the static method or static member’s value are share to current program when it running </p><p>Here is the OSU explain:</p><ul><li>At run-time, a Java program has separate representations for:<ul><li>All <strong>static variables</strong> for each <strong>class</strong> C</li><li>All instance variables for each <strong>instance</strong> of C, i.e., for each object with dynamic type C</li></ul></li><li>Bytecode for C constructors, methods, and nested classes is part of the run-time representation of class C</li></ul><h3 id="Static-Initialization-Blocks"><a href="#Static-Initialization-Blocks" class="headerlink" title="Static Initialization Blocks"></a>Static Initialization Blocks</h3><p>To initialize static variables in a class, you may write a static initialization block that looks like this:</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">static</span> &#123;</span><br><span class="line"><span class="comment">// Code to initialize static variables</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>This code is automatically executed when the <strong>class is loaded</strong>, i.e., once at the very beginning of program execution</p><p>Note: as I said, “it will initial <strong>at the start of the execution</strong>“</p><h3 id="Nested-Interfaces"><a href="#Nested-Interfaces" class="headerlink" title="Nested Interfaces"></a>Nested Interfaces</h3><p>An interface may be nested within another interface</p><ul><li>Example (from OSU CSE components)<ul><li>Map.Pair&lt;K,V&gt;</li><li>Map.Entry&lt;K,V&gt;</li></ul></li></ul><h3 id="Nested-Classes"><a href="#Nested-Classes" class="headerlink" title="Nested Classes"></a>Nested Classes</h3><p>A class that is nested as a member of another class may be:</p><ul><li><p>A static nested class</p><ul><li>A static nested class <strong>does not have access</strong> to instance members of its enclosing class<ul><li>Effectively, it’s a top-level class declared inside another class since it “logically belongs”</li><li>Example (from OSU CSE components): MapSecondary.SimplePair</li><li>Example (from Java libraries): AbstractMap.SimpleEntry&lt;K,V&gt;</li></ul></li></ul></li><li><p>An <strong>instance nested class</strong>, which is called an <strong>inner class</strong></p><ul><li><p>the Node we written before, right?</p></li><li><p>Each instance of an inner class belongs to an instance of its enclosing class</p></li><li><p>Has access to generic parameters, variables, methods, etc., of its enclosing instance</p></li><li><p>Examples (from OSU CSE components): </p><ul><li>Stack2.Node</li></ul></li><li><p>Stack2.Stack2Iterator</p></li></ul></li></ul><p><img src="/Assists/imgs/image-20221207005422721.png" alt="image-20221207005422721"></p><h3 id="Access-Modifiers"><a href="#Access-Modifiers" class="headerlink" title="Access Modifiers"></a>Access Modifiers</h3><p>There are <strong>four access modifiers</strong> in Java</p><ul><li>public <ul><li>(Only public and “package private” apply to top-level units declare interface and classes, interface members can be public (the default) or private (not used in OSU components); class members can be any of the four.)<ul><li>Note: for the member, we talking about <strong>variable</strong> rather than method.</li></ul></li><li>A <strong>top-level unit</strong> declared <strong>public</strong> is <strong>accessible</strong> from <strong>anywhere</strong></li><li>A <strong>member</strong> declared <strong>public</strong> is <strong>accessible</strong> from <strong>anywhere too</strong><ul><li>So long as the top-level unit it’s in is also accessible, which henceforth goes without saying</li></ul></li></ul></li><li>protected<ul><li>A top-level unit declared without any access modifier is <strong>accessible</strong> from <strong>anywhere</strong> <strong>within the same package</strong><ul><li>The <code>protected</code> keyword is an access modifier used for attributes, methods and constructors, making them accessible in the same package and subclasses.</li></ul></li><li>A class member declared without any access modifier is <strong>accessible</strong> from a<strong>nywhere within the same package</strong><ul><li>Everyone could change it into same pack by adding this as its first line by : package NAME; ()</li></ul></li></ul></li><li>default(package private)</li><li>privarte<ul><li>A class (or interface) member declared private is <strong>accessible</strong> <strong>only</strong> from within the class (or interface) <strong>containing</strong> the <strong>private member</strong></li><li><strong>Best practice</strong> is to make all members in <strong>interfaces</strong> <strong>public</strong> and all <strong>static and instance variables in classes private</strong>, and to offer public methods with which clients may indirectly manipulate their values</li><li><strong>An exception</strong>: <strong>constants</strong>, which are normally public static final variables</li></ul></li></ul><p><img src="/Assists/imgs/image-20221207004941475.png" alt="image-20221207004941475"></p><h3 id="Final"><a href="#Final" class="headerlink" title="Final"></a>Final</h3><ul><li>A class declared final may not be extended </li><li>A method declared final may not be overridden </li><li>A variable declared final may not be modified once it is given a value<ul><li>Which is why it is often called a “constant” <ul><li>Be careful! For <strong>a reference variable</strong> (or parameter): the <strong>reference value</strong> <strong>cannot</strong> be <strong>modified</strong>, but the <strong>object value can be modified</strong></li></ul></li></ul></li><li>A formal parameter declared final may not be modified inside the method</li></ul>]]></content>
      
      
      
        <tags>
            
            <tag> CSE2231 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CSE 2231 Midterm 2 review</title>
      <link href="/2022/12/19/CSE2231%20Midterm%202%20review/"/>
      <url>/2022/12/19/CSE2231%20Midterm%202%20review/</url>
      
        <content type="html"><![CDATA[<h1 id="CSE2231-Midterm-2"><a href="#CSE2231-Midterm-2" class="headerlink" title="CSE2231 Midterm 2"></a>CSE2231 Midterm 2</h1><table><thead><tr><th>Type</th><th>Mathematical type</th><th align="left">Description</th></tr></thead><tbody><tr><td>Heap</td><td>inary tree of T</td><td align="left">it is a complete binary tree, the label in each node is “smaller than or equal to” the label in each of its child nodes</td></tr><tr><td>Tree</td><td>tree of t</td><td align="left">A tree can be thought of as a structure comprising zero or more nodes, each with a label of some mathematical type, say T, called the label type</td></tr><tr><td>Sequence&lt;Tree&lt;T&gt;&gt;</td><td>string of tree of T</td><td align="left"></td></tr></tbody></table><p>Complete binary tree is all level except bottom level with any nodes on the bottom level <strong>as far left</strong> as possible</p><h3 id="OSU-SortingMachine"><a href="#OSU-SortingMachine" class="headerlink" title="OSU SortingMachine"></a>OSU SortingMachine</h3><p>A heap can be used to represent the values in a SortingMachine</p><ul><li>In <strong>changeToExtractionMode</strong>, arrange all the values <strong>into</strong> a heap</li><li>In removeFirst, remove the root, and adjust the slightly mutilated heap to make it a heap again</li><li>removeFirst property<ul><li>If the root is the only node in the heap, then after removing it, what remains is already a heap; nothing left to do</li><li>If the root is not the only node, then removing it leaves an “<strong>opening</strong>” that must be filled by moving some other value in the heap into the opening<ul><li>[siftdown the node][<a href="http://web.cse.ohio-state.edu/software/2231/web-sw2/extras/slides/14.Heaps-Heapsort.pdf]">http://web.cse.ohio-state.edu/software/2231/web-sw2/extras/slides/14.Heaps-Heapsort.pdf]</a></li></ul></li></ul></li></ul><h2 id="Linked-Data-Structures"><a href="#Linked-Data-Structures" class="headerlink" title="Linked Data Structures"></a>Linked Data Structures</h2><h3 id="Singly-Linked-Lists"><a href="#Singly-Linked-Lists" class="headerlink" title="Singly-Linked Lists"></a>Singly-Linked Lists</h3><h4 id="Direct-access"><a href="#Direct-access" class="headerlink" title="Direct access"></a>Direct access</h4><p>​Direct access means the entries of a collection (typically with a string model) may be accessed by providing an int positis means the entries of a collection (typically with a string model) may be accessed by providing an int position&#x2F;index of any entry in the collectionn&#x2F;index of any entry in the collection – A classical but unfortunate synonym is random access; nothing random about it!</p><h4 id="Sequential-access"><a href="#Sequential-access" class="headerlink" title="Sequential access"></a>Sequential access</h4><p>​means the entries of a collection (with a string model) may be accessed in increasing order of position by accessing the “next” entry in the collection</p><h3 id=""><a href="#" class="headerlink" title=""></a><img src="/./Assists/imgs/image-20221105181809182.png" alt="image-20221105181809182"></h3><h4 id="Dynamic-Can-Support-Fast-Sequential-Access"><a href="#Dynamic-Can-Support-Fast-Sequential-Access" class="headerlink" title="Dynamic Can Support Fast Sequential Access"></a>Dynamic Can Support Fast Sequential Access</h4><ul><li>If we want a dynamic collection, then we should give up on storing all entries of the collection in contiguous memory locations</li><li>If we want fast sequential access, then we should give up on fast direct access<ul><li>– Instead, for every entry in the collection, wherever it is in memory, simply keep a reference to (i.e., memory location of) the “<strong>next</strong>” entry (How Singly linked list )</li></ul></li></ul><h3 id="The-Smart-Node-havent-write-yet"><a href="#The-Smart-Node-havent-write-yet" class="headerlink" title="The Smart Node(havent write yet)"></a>The Smart Node(havent write yet)</h3><p>​To see why we want the extra node at the beginning of the linked list, write the code for enqueue without it (but be careful) – You should be able to see why it’s a smart node rather than a dummy node</p><p>Why is the smart node helpful in the representation of a Queue, but not of a Stack?</p><h3 id="Doubly-Linked-Lists"><a href="#Doubly-Linked-Lists" class="headerlink" title="Doubly-Linked Lists"></a>Doubly-Linked Lists</h3><h2 id="Standard-Method"><a href="#Standard-Method" class="headerlink" title="Standard Method"></a>Standard Method</h2><h4 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance"></a>newInstance</h4><p>Returns a new object with the same dynamic type as this, having an initial value. If the type TF has a no-argument constructor, then the value of the new returned object satisfies its contract. Otherwise, the value of the new returned object satisfies the contract of the constructor call that was used to initialize this</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br></pre></td></tr></table></figure><p>This tells the compiler not to issue a warning about “unchecked conversion”</p><h4 id="clear"><a href="#clear" class="headerlink" title="clear"></a>clear</h4><p>Resets this to an initial value. If the type TF has a no-argument constructor, then this satisfies its contract. Otherwise, this satisfies the contract of the constructor call that was used to initialize #this.</p><h4 id="transferFrom"><a href="#transferFrom" class="headerlink" title="transferFrom"></a>transferFrom</h4><p>we have to cast because we need to transfer everything from the source</p><h2 id="Iterators"><a href="#Iterators" class="headerlink" title="Iterators"></a>Iterators</h2><p>iterators offer a <strong>special</strong> way of getting <strong>sequential access</strong> to all elements&#x2F;entries of a collection</p><p>Since List extends the interface Iterable, you may write a for-each loop to “see” all elements </p><h3 id="boolean-hasNext"><a href="#boolean-hasNext" class="headerlink" title="boolean hasNext()"></a>boolean hasNext()</h3><p>​Returns true iff the iteration has more elements </p><h3 id="T-next"><a href="#T-next" class="headerlink" title="T next()"></a>T next()</h3><p>​Returns the next element in the iteration (i.e., the next “unseen” element, which becomes a “seen” element)</p><h3 id="void-remove"><a href="#void-remove" class="headerlink" title="void remove"></a>void remove</h3><p>​The remove method is described as “optional” in the interface Iterator, and we do not “support” it because doing so can cause serious problems</p><h2 id="Mathematical-Tree-Notation"><a href="#Mathematical-Tree-Notation" class="headerlink" title="Mathematical Tree Notation"></a>Mathematical Tree Notation</h2><p>A tree (type tree of T) is either</p><ul><li><p>the empty tree (empty_tree), which has no nodes at all; or</p></li><li><p>a non-empty tree, which consists of: • A root node (type T) • A string of the subtrees of the root (type string of tree of T)</p></li><li><p>Since a non-empty tree may contain other trees (each of which may contain others), its structure is <strong>recursive</strong></p></li></ul><h3 id="Non-Empty-Trees"><a href="#Non-Empty-Trees" class="headerlink" title="Non-Empty Trees"></a>Non-Empty Trees</h3><p>Every non-empty tree is the result of the mathematical function compose applied to a value of the label type T and a string of tree of T, which are the root and the subtrees of the resulting tree</p><p>could have a lot of subtrees</p><p>&#x2F;&#x2F;some formula in Tree class</p><h2 id="BugsWorld-Intro"><a href="#BugsWorld-Intro" class="headerlink" title="BugsWorld Intro"></a>BugsWorld Intro</h2><h3 id="Abstract-Syntax-Trees"><a href="#Abstract-Syntax-Trees" class="headerlink" title="Abstract Syntax Trees"></a>Abstract Syntax Trees</h3><p>An abstract syntax tree (AST) is a tree model of an <strong>entire program</strong> or a certain “program structure” (e.g., a statement or an expression in a Java program)</p><h2 id="BL-Compiler-Structure"><a href="#BL-Compiler-Structure" class="headerlink" title="BL Compiler Structure"></a>BL Compiler Structure</h2><p><img src="/./Assists/imgs/image-20221106155956275.png" alt="image-20221106155956275"></p><h2 id="Statement"><a href="#Statement" class="headerlink" title="Statement"></a>Statement</h2><h3 id="Statement-Kernel-Structure"><a href="#Statement-Kernel-Structure" class="headerlink" title="Statement Kernel Structure"></a>Statement Kernel Structure</h3><p>The Statement component family allows you to manipulate values that are ASTs for BL statements</p><ol><li><p>type StatementKernel -&gt; type StatementKernel is modeled by STATEMENT_MODEL</p><ol><li><p>STATEMENT_MODEL -&gt; STATEMENT_MODEL is tree of STATEMENT_LABEL</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">STATEMENT_MODEL is tree of STATEMENT_LABEL</span><br><span class="line">exemplar s</span><br><span class="line">constraint</span><br><span class="line">|s| &gt; 0 and</span><br><span class="line">[BLOCK can have 0 or more children, but</span><br><span class="line">not another BLOCK as a child] and</span><br><span class="line">[IF must have exactly one BLOCK child] and</span><br><span class="line">[IF_ELSE must have exactly two BLOCK</span><br><span class="line">children] and</span><br><span class="line">[WHILE must have exactly one BLOCK child] and</span><br><span class="line">[CALL must have no children (must be a leaf)]</span><br></pre></td></tr></table></figure><ol><li><p>STATEMENT_LABEL -&gt; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">STATEMENT_LABEL is (</span><br><span class="line">kind: Kind,</span><br><span class="line">test: Condition,</span><br><span class="line">call: IDENTIFIER)</span><br><span class="line">exemplar sl</span><br><span class="line">constraint</span><br><span class="line">[if sl.kind = BLOCK then sl.test and sl.call are</span><br><span class="line">irrelevant] and</span><br><span class="line">[if sl.kind = IF or sl.kind = IF_ELSE or</span><br><span class="line">sl.kind = WHILE then sl.call is irrelevant] and</span><br><span class="line">[if sl.kind = CALL then sl.test is irrelevant]</span><br></pre></td></tr></table></figure><ol><li><p>IDENTIFIER -&gt; </p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">IDENTIFIER is string of character</span><br><span class="line">exemplar id</span><br><span class="line">constraint</span><br><span class="line">[id starts with a letter &#x27;a&#x27;-&#x27;z&#x27;,</span><br><span class="line">&#x27;A&#x27;-&#x27;Z&#x27;] and</span><br><span class="line">[id contains only letters, digits</span><br><span class="line">&#x27;0&#x27;-&#x27;9&#x27;, and &#x27;-&#x27;] and</span><br><span class="line">[id is not one of the keywords or</span><br><span class="line">conditions in the BL language]</span><br></pre></td></tr></table></figure></li></ol></li></ol></li></ol></li></ol><h2 id="Program"><a href="#Program" class="headerlink" title="Program"></a>Program</h2><p>The mathematical model of a Program includes that of a Statement (specifically, a BLOCK) for its body, </p><p>plus more:</p><p> – the program name</p><p> – the new user-defined instructions, each of which also has a body</p><h3 id="ProgramKernel"><a href="#ProgramKernel" class="headerlink" title="ProgramKernel"></a>ProgramKernel</h3><p>type ProgramKernel is modeled by PROGRAM_MODEL</p><ol><li><p>PROGRAM_MODEL -&gt;</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">PROGRAM_MODEL is (</span><br><span class="line">name: IDENTIFIER,</span><br><span class="line">context: CONTEXT,</span><br><span class="line">body: STATEMENT_MODEL</span><br><span class="line">)</span><br><span class="line">exemplar p</span><br><span class="line">constraint</span><br><span class="line">[p.body is a BLOCK statement]</span><br></pre></td></tr></table></figure><ol><li><p>Context() comprises zero or more new instructions.</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line">CONTEXT is finite set of (</span><br><span class="line">name: IDENTIFIER,</span><br><span class="line">body: STATEMENT_MODEL)</span><br><span class="line">exemplar c</span><br><span class="line">constraint</span><br><span class="line">[the names of instructions in c are</span><br><span class="line">unique] and</span><br><span class="line">[the names of instructions in c do not</span><br><span class="line">match the names of primitive</span><br><span class="line">instructions in the BL language] and</span><br><span class="line">[the bodies of instructions in c are all</span><br><span class="line">BLOCK statements]</span><br></pre></td></tr></table></figure></li></ol></li></ol><h2 id="Context-Free-Grammars"><a href="#Context-Free-Grammars" class="headerlink" title="Context-Free Grammars"></a>Context-Free Grammars</h2><p><img src="/./Assists/imgs/image-20221106165755417.png" alt="image-20221106165755417"></p><h3 id="Grammar-question-ask-prof"><a href="#Grammar-question-ask-prof" class="headerlink" title="Grammar *(question ask prof)"></a>Grammar *(question ask prof)</h3><p>A grammar is set of formation rules for string in language</p><p>A grammar is context-free if it satisfies certain technical conditions described herein. (what’s that mean)</p><h3 id="Languages"><a href="#Languages" class="headerlink" title="Languages"></a>Languages</h3><p>A language is a set of strings over some alphabet <strong>Σ</strong></p><p>If L is a language, then mathematically it is a set of string of Σ</p><h3 id="CFG-symbol-def"><a href="#CFG-symbol-def" class="headerlink" title="CFG symbol def"></a>CFG symbol def</h3><img src="./Assists/imgs/image-20221106174055318.png" alt="image-20221106174055318" style="zoom:50%;" /><img src="./Assists/imgs/image-20221106172519616.png" alt="image-20221106172519616" style="zoom:50%;" /><img src="./Assists/imgs/image-20221106172538873.png" alt="image-20221106172538873" style="zoom:50%;" /><img src="./Assists/imgs/image-20221106173126401.png" alt="image-20221106173126401" style="zoom:50%;" /><p><img src="/./Assists/imgs/image-20221106173142547.png" alt="image-20221106173142547"></p><p><img src="/./Assists/imgs/image-20221106173216980.png" alt="image-20221106173216980"></p><h3 id="Drivations"><a href="#Drivations" class="headerlink" title="Drivations"></a>Drivations</h3><p>A derivation of a string of terminal symbols consists of a sequence of specific rewrite-rule applications that begin with the start symbol and continue until only terminal symbols remain</p><ul><li>The symbol ⇒ indicates a derivation step, i.e., a specific rewrite-rule application</li></ul><p>E.g. of derivation</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">real-const  ⇒ digit-seq . digit-seq exponent</span><br><span class="line">            ⇒ digit . digit-seq exponent</span><br><span class="line">            ⇒ 5 . digit-seq exponent</span><br><span class="line">            ⇒ 5 . digit exponent</span><br><span class="line">            ⇒ 5 . 6 exponent</span><br><span class="line">            ⇒ 5 . 6 E digit-seq</span><br><span class="line">            ⇒ 5 . 6 E digit digit-seq</span><br><span class="line">            ⇒ 5 . 6 E 1 digit-seq</span><br><span class="line">            ⇒ 5 . 6 E 1 digit</span><br><span class="line">            ⇒ 5 . 6 E 1 0</span><br></pre></td></tr></table></figure><h3 id="Derivation-Trees"><a href="#Derivation-Trees" class="headerlink" title="Derivation Trees"></a>Derivation Trees</h3><ul><li>A derivation tree depicts a derivation (such as those above) in a tree • Note that the order in which rewrites are done is sometimes arbitrary</li><li>A tree captures the required temporal order of rewrites from <strong>top-to-bottom</strong> </li><li>A tree captures the required spatial order <strong>among terminal symbols from left-to-right</strong></li></ul><h2 id="Tokenizing"><a href="#Tokenizing" class="headerlink" title="Tokenizing"></a>Tokenizing</h2><p>In the examples of CFGs, we dealt with languages over the alphabet of individual characters</p><p>Now, we deal with languages over an alphabet of tokens, each of which is a unit that you want to consider as a single entity in the language</p><ul><li><strong>Choice of tokens is a design decision</strong></li></ul><h3 id="Tokenizer’s-Job"><a href="#Tokenizer’s-Job" class="headerlink" title="Tokenizer’s Job"></a>Tokenizer’s Job</h3><p>The job of the tokenizer is to transform a string of characters into a string of tokens\</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Input : &quot;4 + (7 DIV 3) REM 5&quot;</span><br><span class="line">Output: &lt;&quot;4&quot;, &quot;+&quot;, &quot;(&quot;, &quot;7&quot;, &quot;DIV&quot;,&quot;3&quot;, &quot;)&quot;, &quot;REM&quot;, &quot;5&quot;&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure><h2 id="Code-Generation"><a href="#Code-Generation" class="headerlink" title="Code Generation"></a>Code Generation</h2><p>last step of code compling</p><h3 id="Executing-a-BL-Program"><a href="#Executing-a-BL-Program" class="headerlink" title="Executing a BL Program"></a>Executing a BL Program</h3><ul><li>There are two qualitatively different ways one might execute a BL program, given a value of type Program that has been constructed from BL source code: </li><li>Interpret the Program directly </li><li>Compile the Program into object code (“byte code”) that is executed by a virtual machine</li></ul><h4 id="Time-Lines-of-Execution"><a href="#Time-Lines-of-Execution" class="headerlink" title="Time Lines of Execution"></a>Time Lines of Execution</h4><p><img src="/./Assists/imgs/image-20221106183407106.png" alt="image-20221106183407106"></p><h3 id="Code-Generation-1"><a href="#Code-Generation-1" class="headerlink" title="Code Generation"></a>Code Generation</h3><ul><li>Code generation is translating a Program to a linear (non-nested) structure, i.e., to a string of low-level instructions or “byte codes” of a BL virtual machine that can do the following:<ul><li>Update the state of BugsWorld </li><li>“Jump around” in the string to execute the right “byte codes” under the right conditions, depending on the state of BugsWorld</li></ul></li></ul><h3 id="Code-Generator-VM-writting-by-hand"><a href="#Code-Generator-VM-writting-by-hand" class="headerlink" title="Code Generator VM writting by hand"></a>Code Generator VM writting by hand</h3><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//question</span></span><br><span class="line">PROGRAM Example4 IS</span><br><span class="line"></span><br><span class="line">    INSTRUCTION TurnBackAndInfect IS</span><br><span class="line">        turnright</span><br><span class="line">        turnright</span><br><span class="line">        IF next-is-enemy THEN</span><br><span class="line">            infect</span><br><span class="line">        END IF</span><br><span class="line">    END TurnBackAndInfect</span><br><span class="line"></span><br><span class="line">BEGIN</span><br><span class="line">    WHILE <span class="literal">true</span> DO</span><br><span class="line">        TurnBackAndInfect</span><br><span class="line">    END WHILE</span><br><span class="line">END Example4</span><br><span class="line">    </span><br><span class="line"><span class="comment">//result</span></span><br><span class="line"><span class="number">0</span> JUMP_IF_NOT_TRUE</span><br><span class="line"><span class="number">1</span> <span class="number">9</span></span><br><span class="line"><span class="number">2</span> TURNRIGHT</span><br><span class="line"><span class="number">3</span> TURNRIGHT</span><br><span class="line"><span class="number">4</span> JUMP_IF_NOT_NEXT_IS_ENEMY</span><br><span class="line"><span class="number">5</span> <span class="number">7</span></span><br><span class="line"><span class="number">6</span> INFECT</span><br><span class="line"><span class="number">7</span> JUMP</span><br><span class="line"><span class="number">8</span> <span class="number">0</span></span><br><span class="line"><span class="number">9</span> HALT <span class="comment">//terminate the program    </span></span><br><span class="line">    </span><br><span class="line">    </span><br></pre></td></tr></table></figure><h3 id="BugsWorld-Virtual-Machine"><a href="#BugsWorld-Virtual-Machine" class="headerlink" title="BugsWorld Virtual Machine"></a>BugsWorld Virtual Machine</h3><p>The virtual machine for BugsWorld has three main features:</p><ul><li><p>Memory </p><ul><li><strong>A string of integers</strong> that contains the “byte codes” generated from a Program.</li></ul></li><li><p>Instruction set </p><ul><li><p>A <strong>finite set of integers</strong> that are the “byte codes” for the primitive instructions of the BugsWorld VM</p></li><li><p>Each instruction is given a <strong>symbolic name <em>here</em></strong>, for <strong>ease of reading</strong>, but the <strong>VM</strong> knows <strong>only</strong> about integer “byte codes”</p></li><li><p>for code generation has two types of instructions:</p><ul><li><p>Primitive instructions</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">• MOVE (0)</span><br><span class="line">• TURNLEFT (1)</span><br><span class="line">• TURNRIGHT (2)</span><br><span class="line">• INFECT (3)</span><br><span class="line">• SKIP (4)</span><br><span class="line">• HALT (5)</span><br></pre></td></tr></table></figure></li><li><p>Jump instructions</p><figure class="highlight plaintext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">• JUMP (6)</span><br><span class="line">--This unconditional jump instruction causes the program counter to be set to the value in the memory location following the JUMP code.</span><br><span class="line">• JUMP_IF_NOT_NEXT_IS_EMPTY (7)</span><br><span class="line">• JUMP_IF_NOT_NEXT_IS_NOT_EMPTY (8)</span><br><span class="line">• JUMP_IF_NOT_NEXT_IS_WALL (9)</span><br><span class="line">--This conditional jump instruction causes the program counter to be set to the value in the memory location following the instruction code iff it is not the case that the cell in front of the bug is a wall.</span><br><span class="line">• JUMP_IF_NOT_NEXT_IS_NOT_WALL (10)</span><br><span class="line">• JUMP_IF_NOT_NEXT_IS_FRIEND (11)</span><br><span class="line">• JUMP_IF_NOT_NEXT_IS_NOT_FRIEND (12)</span><br><span class="line">• JUMP_IF_NOT_NEXT_IS_ENEMY (13)</span><br><span class="line">• JUMP_IF_NOT_NEXT_IS_NOT_ENEMY (14)</span><br><span class="line">• JUMP_IF_NOT_RANDOM (15)</span><br><span class="line">• JUMP_IF_NOT_TRUE (16)</span><br></pre></td></tr></table></figure></li></ul></li></ul></li><li><p>Program counter</p><ul><li>An integer that designates the location&#x2F;position&#x2F;address in memory of the “byte code” to be executed next.</li><li>Normal execution increments the program counter by 1 or 2 after each instruction, <strong>so execution proceeds sequentially</strong></li></ul></li></ul><h1 id="Tips-Note"><a href="#Tips-Note" class="headerlink" title="Tips Note"></a>Tips Note</h1><h3 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h3><p>Handling Statement as table with compile counter</p><p>HW 30***</p><p><img src="/./Assists/imgs/image-20221107170530229.png" alt="image-20221107170530229"></p>]]></content>
      
      
      
        <tags>
            
            <tag> CSE2231 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Git distributed version control system</title>
      <link href="/2022/12/18/git/"/>
      <url>/2022/12/18/git/</url>
      
        <content type="html"><![CDATA[<h3 id="分布式版本控制"><a href="#分布式版本控制" class="headerlink" title="分布式版本控制"></a>分布式版本控制</h3><p>它允许软件开发者可以共同参与一个软件开发项目，<strong>但是不必在相同的网络系统下工作</strong>。其作法是在每个开发者电脑中复制一份完整的代码库以及完整历史。因此在无法连接网络时，仍可以进行软件的分支及合并，可以加速大部分的作业，增加此情形可以进行的工作，而且系统的代码库可以在多家电脑上备份，不需靠单一位置的备份。而多个位置的代码库再透过其他机制来达到同步。</p><h3 id="版本控制的好处"><a href="#版本控制的好处" class="headerlink" title="版本控制的好处"></a>版本控制的好处</h3><p>本质上是一种记录文件内容变化 记录文件修改历史记录, 从而让用户可以查看历史版本, 方便版本切换</p><h4 id="为什么需要版本控制"><a href="#为什么需要版本控制" class="headerlink" title="为什么需要版本控制"></a>为什么需要版本控制</h4><p>不仅仅是个人开发 团队协作更需要tracking version</p><h2 id="集中式版本控制-vs-分布式版本控制"><a href="#集中式版本控制-vs-分布式版本控制" class="headerlink" title="集中式版本控制 vs 分布式版本控制"></a>集中式版本控制 vs 分布式版本控制</h2><h3 id="集中式版本控制"><a href="#集中式版本控制" class="headerlink" title="集中式版本控制"></a>集中式版本控制</h3><p>CVS SVN(Subversion)</p><p>拥有单一的集中管理的服务器, 保存所有文件的修订版本, 协同工作的人们都空过客户端链接这台服务器, 取出最新的文件提交更新.</p><p>好处: 每个人都可以一定程度上看到其他人做了什么 便于管理员管理</p><p>缺点: 中央服务器的单点故障, 如果服务器宕机, 谁都无法提交更新, 无法协同工作</p><h2 id="Git运行流程Processing"><a href="#Git运行流程Processing" class="headerlink" title="Git运行流程Processing"></a>Git运行流程Processing</h2>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>SDD Introduction</title>
      <link href="/2022/12/18/SDD%20Introduction/"/>
      <url>/2022/12/18/SDD%20Introduction/</url>
      
        <content type="html"><![CDATA[<p>Software design documents should include:</p><ul><li>A description of the product.</li><li>The scope of the work required for the project to be completed.</li><li>And a list of milestones.</li></ul><h3 id="A-User-Interface"><a href="#A-User-Interface" class="headerlink" title="A. User Interface"></a>A. User Interface</h3><p>The user interface component of a project is by far the most challenging section of the design document.</p><p>Even if the product owner sends clear illustrations created by a graphic designer, the graphic designer almost always is not also a strong programmer. Naturally, this will lead to communication issues.</p><p>So yes, do create those illustrations, but keep in mind that you’ll need to provide some additional context, which I’ll get to in a moment. The problem here is that the illustrations likely say little regarding…</p><ul><li>Animations</li><li>Control states.</li><li>What happens with a button when it needs to be unusable?</li><li>How do you know if the button should be visible to the end user or not?</li><li>Or how do you ideally want the end-user to navigate the application?</li></ul><p>And this is a key example of how software design documents, like <a href="https://blog.tara.ai/how-to-write-software-test-cases-template/">software test cases</a>, are a valuable time saver. Prior to a developer writing any code behind the illustrations, you need to have all such questions answered.</p><p>But first, you need to create those illustrations…</p><h3 id="Wireframing-Tools"><a href="#Wireframing-Tools" class="headerlink" title="Wireframing Tools"></a>Wireframing Tools</h3><p>You might be asking, “Okay, but what if I don’t have a graphic designer?”</p><p>Not to worry…</p><p>You can create some clean illustrations using one of many different <a href="https://www.creativebloq.com/wireframes/top-wireframing-tools-11121302">wireframing tools</a>, and put together a complete set of screen layouts. This should include any variations that the views display in different application states. Just for the record, our favorite wireframing tool is <a href="https://www.invisionapp.com/">Invision</a>. They’re awesome </p><p>And if you’re working on a dual application that needs to be compatible across different devices and screen sizes, be sure to create separate wireframes for each device.</p><p>Yes, this is a pain in the _______. </p><p>But weigh the cost of having to rewrite hours worth of code and constantly changing the UI, with how long it’ll take one of you to create these screen layouts.</p><p>So, to avoid miscommunication that could turn a three week project into a three month project…</p><p><strong>Take the time in the beginning stages to get the UI design right!</strong></p><p>Don’t presume anything, and ask each other lots of questions.</p><h2 id="B-Requirements-x2F-System-Overview"><a href="#B-Requirements-x2F-System-Overview" class="headerlink" title="B. Requirements &#x2F; System Overview"></a>B. Requirements &#x2F; System Overview</h2><p>In the requirements section of your application design document, you’ll provide a general description of the functionality, context and design of the project.</p><p>To help your developer(s) better understand your application, you’ll answer questions such as:</p><ul><li>“What’s the main purpose of the application?” And,</li><li>“What are the possible failure scenarios and conditions?”</li></ul><p>The point here is for the product owner to answer these open ended questions as well as they can, and then for the developer to ask follow up questions once they receive the answers. As a result, you will dramatically reduce the risk of miscommunication and the need to write additional code.</p><h2 id="C-Milestones"><a href="#C-Milestones" class="headerlink" title="C. Milestones"></a>C. Milestones</h2><p>Setting clear milestones for your design document template is key to fully understanding the <a href="https://blog.tara.ai/project-scope/">scope of your project</a>.</p><p>Whether it’s the developer or the product owner that sets these milestones, they should be as unambiguous as possible, and agreed upon one-by-one by both parties.</p><p>Milestones can be in the form of functionalities and &#x2F; or components, or possibly in the form of independent applications should the job description include a full suite of deliverables. At a minimum, milestones should provide a clear metric toward completion.</p>]]></content>
      
      
      
        <tags>
            
            <tag> note </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>first-post</title>
      <link href="/2022/12/17/first-post/"/>
      <url>/2022/12/17/first-post/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
  
  
</search>
